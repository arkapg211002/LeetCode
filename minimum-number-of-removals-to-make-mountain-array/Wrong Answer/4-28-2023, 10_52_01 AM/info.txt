{"id":940940062,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682659321,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940940062/","is_pending":"Not Pending","title":"Minimum Number of Removals to Make Mountain Array","memory":"N/A","code":"class Solution {\n    public int minimumMountainRemovals(int[] nums) {\n        int n=nums.length;\n        int dp1[]=new int[n];\n        int dp2[]=new int[n];\n        Arrays.fill(dp1,1);\n        Arrays.fill(dp2,1);\n        for(int i=0;i<n;i++)\n        {\n            for(int prev=0;prev<=i-1;prev++)\n            {\n                if(nums[prev]<nums[i] && dp1[prev]+1>dp1[i])\n                    dp1[i]=dp1[prev]+1;\n            }\n        }\n        for(int i=n-1;i>0;i--)\n        {\n            for(int prev=n-1;prev>i;prev--)\n            {\n                if(nums[prev]<nums[i] && dp2[prev]+1>dp2[i])\n                    dp2[i]=dp2[prev]+1;\n            }\n        }\n        int max=-1;\n        for(int i=0;i<n;i++)\n            max=(int)Math.max(max,(dp1[i]+dp2[i]-1));\n        return nums.length-max;\n    }\n}","compare_result":"11111111111010000011111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-removals-to-make-mountain-array","has_notes":false}