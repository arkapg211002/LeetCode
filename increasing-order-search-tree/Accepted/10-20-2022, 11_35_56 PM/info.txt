{"id":826781270,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1666289156,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/826781270/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"42 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer>l=new ArrayList<>();\n    public TreeNode increasingBST(TreeNode root) {\n        TreeNode res=new TreeNode(0);\n        TreeNode current=new TreeNode();\n        current=res;\n        form(root,l);\n        for(int i=0;i<l.size();i++)\n        {\n            current.left=null;\n            current.right=new TreeNode(l.get(i));\n            current=current.right;\n        }\n        return res.right;\n        \n    }\n    public void form(TreeNode root,List<Integer>l)\n    {\n        if(root==null)return;\n        form(root.left,l);\n        l.add(root.val);\n        form(root.right,l);\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false}