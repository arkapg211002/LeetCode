{"id":827075659,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1666327677,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/827075659/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"46.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max =1;\n    \n    public int[] findMode(TreeNode root) \n    {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        \n        find_mode(root , map);\n        \n        int[] ans = new int[map.size()];\n        int idx=0;\n        \n        for(Integer key: map.keySet())\n        {\n            if(map.get(key) == max)\n                ans[idx++] = key;\n        }\n        return Arrays.copyOf(ans , idx);\n    }\n    \n    private void find_mode(TreeNode root , HashMap<Integer,Integer> map)\n    {\n        if(root == null)\n            return;\n        \n        if(map.containsKey(root.val))\n        {\n            int count = map.get(root.val) + 1;\n            map.put(root.val , count);\n            max = Math.max(count , max);\n        }\n        else\n            map.put(root.val , 1);\n        \n        find_mode(root.left , map);\n        find_mode(root.right , map);\n    }\n}","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree","has_notes":false}