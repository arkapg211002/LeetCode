{"id":912421826,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678416413,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/912421826/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"99.2 MB","code":"class Solution {\n    public int amountOfTime(TreeNode root, int start) {\n        if(root.left == null && root.right == null) return 0;\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        Queue<TreeNode> q = new ArrayDeque<>();\n        q.add(root);\n        while(!q.isEmpty()){\n            int size = q.size();\n            while(size-->0){\n                TreeNode remove = q.remove();\n                // System.out.printn()\n                if(remove.left!= null){\n                    List<Integer> temp = map.getOrDefault(remove.val, new ArrayList<Integer>());\n                    temp.add(remove.left.val);\n                    map.put(remove.val, temp);\n                    temp = map.getOrDefault(remove.left.val, new ArrayList<Integer>());\n                    temp.add(remove.val);\n                    map.put(remove.left.val, temp);\n                    q.add(remove.left);\n                } \n                if(remove.right!= null){\n                    List<Integer> temp = map.getOrDefault(remove.val, new ArrayList<Integer>());\n                    temp.add(remove.right.val);\n                    map.put(remove.val, temp);\n                    temp = map.getOrDefault(remove.right.val, new ArrayList<Integer>());\n                    temp.add(remove.val);\n                    map.put(remove.right.val, temp);\n                    q.add(remove.right);\n                }\n            }\n        }\n        Set<Integer> visited = new HashSet<>();\n        int result = -1;\n        Queue<Integer> qq = new ArrayDeque<Integer>();\n        qq.add(start);\n        while(!qq.isEmpty()){\n            int size = qq.size();\n            result++;\n            while(size-->0){\n                int remove = qq.remove();\n                visited.add(remove);\n                for(int adj: map.get(remove)){\n                    if(!visited.contains(adj)){\n                        qq.add(adj);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false}