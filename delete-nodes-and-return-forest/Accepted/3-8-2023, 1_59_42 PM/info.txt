{"id":911352916,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678264182,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/911352916/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"43.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<TreeNode>f=new ArrayList<TreeNode>();\n    List<Integer>l=new ArrayList<>();\n    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {\n        for(int i=0;i<to_delete.length;i++)l.add(to_delete[i]);\n        int res=dfs(root);\n        if(res==1)f.add(root);\n        return f;\n    }\n    public int dfs(TreeNode root)\n    {\n        if(root==null)return 0;\n        if(dfs(root.left)==0)root.left=null;\n        if(dfs(root.right)==0)root.right=null;\n        if(l.contains(root.val)==true)\n        {\n            if(root.left!=null)f.add(root.left);\n            if(root.right!=null)f.add(root.right);\n            root=null;\n            return 0;\n        }\n        return 1;\n\n    }\n    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest","has_notes":false}