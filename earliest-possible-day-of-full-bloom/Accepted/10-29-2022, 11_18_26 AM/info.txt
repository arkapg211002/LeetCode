{"id":832474615,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1667022506,"status":10,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/832474615/","is_pending":"Not Pending","title":"Earliest Possible Day of Full Bloom","memory":"126.3 MB","code":"class Solution {\n    public int earliestFullBloom(int[] plantTime, int[] growTime) {\n        int n = plantTime.length;\n        Pair[] flowerTime = new Pair[n];\n        for (int i = 0; i < n; i++) {\n            flowerTime[i] = new Pair(plantTime[i], growTime[i]);\n        }\n        Arrays.sort(flowerTime, (a, b) -> b.growTime - a.growTime);\n        int daysPlanted = 0;\n        int maxDays = 0;\n        for (Pair current : flowerTime) {\n            maxDays = Math.max(maxDays, daysPlanted + current.plantTime + current.growTime);\n            daysPlanted += current.plantTime;\n        }\n        return maxDays;\n    }\n\n    class Pair {\n        public int plantTime;\n        public int growTime;\n\n        Pair(int plantTime, int growTime) {\n            this.plantTime = plantTime;\n            this.growTime = growTime;\n        }\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"earliest-possible-day-of-full-bloom","has_notes":false}