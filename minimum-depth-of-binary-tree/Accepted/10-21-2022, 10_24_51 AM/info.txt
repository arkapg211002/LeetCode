{"id":827079519,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1666328091,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/827079519/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"94.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if(root==null)return 0;\n        int l=minDepth(root.left);\n        int r=minDepth(root.right);\n        if(root.left!=null && root.right!=null)return ((int)Math.min(l,r)+1);\n        else if(root.left!=null && root.right==null)return l+1;\n        //else if(root.left==null && root.right!=null)return r+1;\n        return (r+1);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false}