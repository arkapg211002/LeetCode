{"id":806862983,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1663942779,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/806862983/","is_pending":"Not Pending","title":"Minimum Cost to Move Chips to The Same Position","memory":"N/A","code":"class Solution {\n    public int minCostToMoveChips(int[] position) {\n        int c=0;\n        HashMap<Integer,Integer>hm=new HashMap<>();\n        for(int i=0;i<position.length;i++)\n        {\n            if(hm.containsKey(position[i])==false)\n            {\n                hm.put(position[i],1);\n            }\n            else\n            {\n                hm.put(position[i],hm.get(position[i])+1);\n            }\n        }\n        //System.out.println(hm);\n        int max=Integer.MIN_VALUE,id=0;\n        for(Map.Entry<Integer,Integer>e:hm.entrySet())\n        {\n            //System.out.println(e.getKey()+\" \"+e.getValue());\n            if(e.getValue()>max)\n            {\n                id=e.getKey();\n                max=e.getValue();\n            }\n        }\n        //System.out.println(max+\" \"+id);\n        for(Map.Entry<Integer,Integer>e:hm.entrySet())\n        {\n            int a=e.getKey();\n            int d=(int)Math.abs(a-id);\n            if(d%2==0)continue;\n            else c+=e.getValue();\n        }\n        return c;\n    }\n}","compare_result":"111111101110110011111111011111111001001110011101011","title_slug":"minimum-cost-to-move-chips-to-the-same-position","has_notes":false}