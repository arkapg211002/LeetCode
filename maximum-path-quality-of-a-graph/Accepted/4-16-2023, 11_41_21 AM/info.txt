{"id":934559808,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1681625481,"status":10,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/934559808/","is_pending":"Not Pending","title":"Maximum Path Quality of a Graph","memory":"43.5 MB","code":"class Solution {\n    int ans;\n    public int maximalPathQuality(int[] values, int[][] edges, int maxTime) {\n        int n=values.length;\n        int v[]=new int[n];\n        ArrayList<ArrayList<int[]>>l=new ArrayList<>();\n        for(int i=0;i<n;i++)l.add(new ArrayList<>());\n        for(int r[]:edges)\n        {\n            l.get(r[0]).add(new int[]{r[1],r[2]});\n            l.get(r[1]).add(new int[]{r[0],r[2]});\n        }\n        dfs(0,l,v,values,maxTime,0,0);\n        return ans;\n    }\n    public void dfs(int node,ArrayList<ArrayList<int[]>>l,int v[],int values[],int maxTime,int curTime,int res)\n    {\n        if(curTime>maxTime)return;\n        if(v[node]==0)res+=values[node];\n        if(node==0)ans=(int)Math.max(ans,res);\n        v[node]+=1;\n        for(int it[]:l.get(node))\n            dfs(it[0],l,v,values,maxTime,curTime+it[1],res);\n        v[node]-=1;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-path-quality-of-a-graph","has_notes":false}