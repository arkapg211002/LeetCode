{"id":940966258,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682663587,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940966258/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        int n=nums.length;\n        int dp[]=new int[n];\n        Arrays.fill(dp,1);\n        int cnt[]=new int[n];\n        Arrays.fill(cnt,1);\n        int max=-1;\n        for(int i=0;i<n;i++)\n        {\n            for(int prev=0;prev<=i-1;prev++)\n            {\n                if(nums[prev]<nums[i] && dp[prev]+1>dp[i])\n                {\n                    dp[i]=dp[prev]+1;\n                    cnt[i]=cnt[prev];\n                }\n                else if(nums[prev]<nums[i] && dp[prev]+1==dp[i])\n                {\n                    cnt[i]+=cnt[prev];\n                }\n                max=(int)Math.max(max,dp[i]);\n            }\n        }\n        int res=0;\n        for(int i=0;i<n;i++)\n        {\n            if(dp[i]==max)res+=cnt[i];\n        }\n        return res;\n    }\n}","compare_result":"1110011111111111111111111011011111111111111111111111111111111111111111111100111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false}