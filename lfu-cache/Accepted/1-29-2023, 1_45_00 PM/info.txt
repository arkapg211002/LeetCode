{"id":887349165,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1674980100,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/887349165/","is_pending":"Not Pending","title":"LFU Cache","memory":"125.8 MB","code":"class LFUCache {\n\n  private final Map<Integer, Integer> keyToFreq;\n  private final TreeMap<Integer, LinkedHashSet<Integer>> freqToKey;\n  private final Map<Integer, Integer> keyToValue;\n  private final int capacity;\n\n  public LFUCache(int capacity) {\n    keyToFreq = new HashMap<>();\n    freqToKey = new TreeMap<>();\n    keyToValue = new HashMap<>();\n\n    this.capacity = capacity;\n  }\n\n  public int get(int key) {\n    if (keyToValue.containsKey(key)) {\n      increaseFrequency(key);\n      return keyToValue.get(key);\n    }\n    return -1;\n  }\n\n  public void put(int key, int value) {\n    if (capacity == 0)\n      return;\n\n    if (keyToFreq.size() == capacity && !keyToValue.containsKey(key))\n      removeLastFrequentlyUsed();\n\n    keyToValue.put(key, value);\n\n    if (keyToFreq.containsKey(key))\n      increaseFrequency(key);\n    else {\n      keyToFreq.put(key, 1);\n      freqToKey.computeIfAbsent(1, p -> new LinkedHashSet<>()).add(key);\n    }\n  }\n\n  private void increaseFrequency(int key) {\n    int frequency = keyToFreq.get(key);\n\n    keyToFreq.put(key, frequency + 1);\n    deletePreviousFrequency(key, frequency);\n\n    freqToKey.computeIfAbsent(frequency + 1, p -> new LinkedHashSet<>()).add(key);\n  }\n\n  private void deletePreviousFrequency(int key, int frequency) {\n    LinkedHashSet<Integer> keys = freqToKey.get(frequency);\n    keys.remove(key);\n\n    if (keys.isEmpty())\n      freqToKey.remove(frequency);\n  }\n\n  private void removeLastFrequentlyUsed() {\n    Map.Entry<Integer, LinkedHashSet<Integer>> first = freqToKey.firstEntry();\n    LinkedHashSet<Integer> keys = first.getValue();\n\n    int key = keys.iterator().next();\n\n    keys.remove(key);\n    if (keys.isEmpty())\n      freqToKey.remove(first.getKey());\n\n    keyToFreq.remove(key);\n    keyToValue.remove(key);\n  }\n}","compare_result":"11111111111111111111111111","title_slug":"lfu-cache","has_notes":false}