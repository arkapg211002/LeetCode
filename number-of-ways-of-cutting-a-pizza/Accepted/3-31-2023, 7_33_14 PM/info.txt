{"id":925395251,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680271394,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/925395251/","is_pending":"Not Pending","title":"Number of Ways of Cutting a Pizza","memory":"40.2 MB","code":"class Solution {\n  public int ways(String[] pizza, int k) {\n    final int M = pizza.length;\n    final int N = pizza[0].length();\n    // dp[m][n][k] := # of ways to cut pizza[m:M][n:N] w/ k cuts\n    dp = new int[M][N][k];\n    for (int[][] A : dp)\n      Arrays.stream(A).forEach(a -> Arrays.fill(a, -1));\n    prefix = new int[M + 1][N + 1];\n\n    for (int i = 0; i < M; ++i)\n      for (int j = 0; j < N; ++j)\n        prefix[i + 1][j + 1] = (pizza[i].charAt(j) == 'A' ? 1 : 0) + prefix[i][j + 1] +\n                               prefix[i + 1][j] - prefix[i][j];\n\n    return ways(0, 0, k - 1, M, N);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int[][][] dp;\n  private int[][] prefix;\n\n  // HasApple of pizza[row1..row2)[col1..col2)\n  private boolean hasApple(int row1, int row2, int col1, int col2) {\n    return (prefix[row2][col2] - prefix[row1][col2] - prefix[row2][col1] + prefix[row1][col1]) > 0;\n  }\n\n  private int ways(int m, int n, int k, final int M, final int N) {\n    if (k == 0)\n      return 1;\n    if (dp[m][n][k] >= 0)\n      return dp[m][n][k];\n\n    dp[m][n][k] = 0;\n\n    for (int i = m + 1; i < M; ++i) // Cut horizontally\n      if (hasApple(m, i, n, N) && hasApple(i, M, n, N))\n        dp[m][n][k] = (dp[m][n][k] + ways(i, n, k - 1, M, N)) % kMod;\n\n    for (int j = n + 1; j < N; ++j) // Cut vertically\n      if (hasApple(m, M, n, j) && hasApple(m, M, j, N))\n        dp[m][n][k] = (dp[m][n][k] + ways(m, j, k - 1, M, N)) % kMod;\n\n    return dp[m][n][k];\n  }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-of-cutting-a-pizza","has_notes":false}