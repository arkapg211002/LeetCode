{"id":916787975,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046552,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/916787975/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n\tint m = obstacleGrid.length, n = obstacleGrid[0].length;\n\tint[][] path = new int[m][n];\n\n\tfor (int i = 0; i < m; i++) {\n\t\tif (obstacleGrid[i][0] == 1)  {\n\t\t\tpath[i][0] = 0;\n\t\t\t//on the first column, if there is an obstacle, the rest are blocked. \n\t\t\t//no need to continue.\n\t\t\tbreak;  \n\t\t} else\n\t\t\tpath[i][0] = 1;\n\t}\n\t\n\tfor (int j = 0; j < n; j++) {\n\t\tif (obstacleGrid[0][j] == 1)  {\n\t\t\tpath[0][j] = 0;\n\t\t\t//First row, once obstacle found, the rest are blocked.\n\t\t\tbreak; \n\t\t} else\n\t\t\tpath[0][j] = 1;\n\t}\n\t\n\tfor (int i = 1; i < m; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tif (obstacleGrid[i][j] == 1) \n\t\t\t\tpath[i][j] = 0;\n\t\t\telse\n\t\t\t\tpath[i][j] = path[i-1][j] + path[i][j-1];\n\t\t}\n\t}\n\treturn path[m-1][n-1];\n}","compare_result":null,"title_slug":"unique-paths-ii","has_notes":false}