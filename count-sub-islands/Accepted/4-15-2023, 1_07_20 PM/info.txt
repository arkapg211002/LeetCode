{"id":934004355,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1681544240,"status":10,"status_display":"Accepted","runtime":"673 ms","url":"/submissions/detail/934004355/","is_pending":"Not Pending","title":"Count Sub Islands","memory":"84.1 MB","code":"class Solution {\n\n   class DSU{\n\n       HashMap<String,Node> map=new HashMap<>();\n       class Node{\n           String node;\n           Node parent;\n           int h;\n           int child;\n\n           Node(String s){\n               this.node=s;\n               this.parent=null;\n               this.h=0;\n               this.child=1;\n           }\n       }\n\n       public void create(String el){\n           Node n=new Node(el);\n           n.parent=n;\n\n           map.put(el,n);\n       }\n\n       public Node find(String el){\n            Node n=map.get(el);\n\n            if(n==n.parent) return n;\n\n            Node rr=find(n.parent.node);\n\n            n.parent=rr;\n            return rr;           \n       }\n\n       public void union(String s1,String s2){\n\n           Node d1=find(s1);\n           Node d2=find(s2);\n\n           if(d1.h<d2.h){\n               d1.parent=d2;\n               d2.child+=d1.child;\n           }else if(d1.h>d2.h){\n               d2.parent=d1;\n               d2.child+=d1.child;\n           }else{\n               d1.parent=d2;\n               d2.child+=d1.child;\n               d2.h++;\n           }\n       }\n   }\n\n    public int countSubIslands(int[][] grid1, int[][] grid2) {\n        \n        int r=grid1.length;\n        int c=grid1[0].length;\n\n        DSU d1=new DSU();\n        DSU d2=new DSU();\n\n        for(int i=0;i<r;i++){\n\n            for(int j=0;j<c;j++){\n\n                if(grid1[i][j]==1){\n                    String n1=\"\"+i+\"-\"+j;\n                    d1.create(n1);\n                    int[][] x={{-1,0},{0,-1}};\n\n                     for(int[] y:x){\n                         int newi=i+y[0];\n                         int newj=j+y[1];\n\n                         if(safe(newi,newj,r,c,grid1)){\n                             String n2=\"\"+newi+\"-\"+newj;\n\n                              d1.union(n1,n2);\n\n                         }\n                     }\n                }\n\n                if(grid2[i][j]==1){\n                    String n1=\"\"+i+\"-\"+j;\n                    d2.create(n1);\n                    int[][] x={{-1,0},{0,-1}};\n\n                     for(int[] y:x){\n                         int newi=i+y[0];\n                         int newj=j+y[1];\n\n                         if(safe(newi,newj,r,c,grid2)){\n                             String n2=\"\"+newi+\"-\"+newj;\n                              d2.union(n1,n2);\n                         }\n                     }\n                }\n            }\n        }\n\n        int subisland=0;\n\n        HashMap<String,Integer> map=new HashMap<>();\n\n        for(String node :d2.map.keySet()){\n            String par=d2.find(node).node;\n            if(d1.map.containsKey(par) && d1.map.containsKey(node)){ \n                if(map.containsKey(par) && map.get(par)==-1) continue;\n                    map.put(par, 1);\n            }  \n            else map.put(par,-1);\n\n        }\n\n        for(String s:map.keySet()){\n            if(map.get(s)==1) subisland++;\n        }\n\n        return subisland;\n\n    }\n\n    public boolean safe(int cr,int cc, int r,int c,int[][] grid){\n\n        if(cr<0 || cc <0 || cr>=r || cc>=c ) return false;\n\n        if(grid[cr][cc]==1) return true;\n\n        return false;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"count-sub-islands","has_notes":false}