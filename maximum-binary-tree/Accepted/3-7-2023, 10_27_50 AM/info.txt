{"id":910595327,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678165070,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/910595327/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"42.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        return construct(nums, 0, nums.length-1);\n    }\n    private int find(int[] nums, int start, int stop){\n        int maxInd = stop;\n        for(int i = start; i < stop; i++){\n            if(nums[maxInd] < nums[i]){\n                maxInd = i;\n            }\n        }\n        return maxInd;\n    }\n    private TreeNode construct(int[] nums, int start, int stop){\n        if(stop < start){\n            return null;\n        }\n        int maxInd = find(nums, start, stop);\n        TreeNode root = new TreeNode(nums[maxInd]);\n        root.left = construct(nums, start, maxInd-1);\n        root.right = construct(nums, maxInd+1, stop);\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false}