{"id":933666823,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681482448,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/933666823/","is_pending":"Not Pending","title":"Flower Planting With No Adjacent","memory":"50.9 MB","code":"class Solution {\n        public int[] gardenNoAdj(int N, int[][] paths) {\n        \n        // First lets create our N + 1 gardens, gardens[0] is a dummy value since gardens are 1 indexed\n        Garden[] gardens = new Garden[N + 1];\n        for (int i = 1; i < gardens.length; i++) gardens[i] = new Garden();\n        \n        // Lets populate the neighboring gardens for each of our garden.\n        for (int[] path : paths) {\n            Garden garden1 = gardens[path[0]], garden2 = gardens[path[1]];\n            garden1.neighboringGardens.add(garden2);\n            garden2.neighboringGardens.add(garden1);\n        }\n        \n        // At this point we have turned the visualized garden on our whiteboard into code!!\n        // If you got this far it shows you knows how translate ideas into code!\n        // Many people, myself included, did not make it here without help\n                \n        // This is the part where for each garden we attempt to select a flower type\n        for (int i = 1; i < gardens.length; i++) gardens[i].prioritizeFlowerType();\n        \n        // Put it together\n        int[] result = new int[N];\n        for (int i = 0; i < result.length; i++) result[i] = gardens[i+1].flower;\n        return result;\n        \n    }\n    \n    private static class Garden {\n        private int[] flowerTypes = new int[]{1,2,3,4};\n        private int flower;\n        private List<Garden> neighboringGardens;\n        \n        public Garden() {\n            this.flower = -1;\n            this.neighboringGardens = new ArrayList<>();\n        }\n        \n        public void prioritizeFlowerType() {\n            Set<Integer> flowerTypesNeighborsHave = new HashSet<>();\n            // See which flowers my neighbors have so I can select mine\n            for (Garden neighbor : neighboringGardens)\n                if (neighbor.flower != -1) flowerTypesNeighborsHave.add(neighbor.flower);\n            \n            // At this point we know what flowers are in our neighbors gardens. We can select a flower accordingly\n            // There is garunteed to be an answer, remember.\n            for (int i : flowerTypes) {\n                if (!flowerTypesNeighborsHave.contains(i)) {\n                    flower = i;\n                    break;\n                }\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"flower-planting-with-no-adjacent","has_notes":false}