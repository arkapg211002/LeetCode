{"id":933666624,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681482422,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/933666624/","is_pending":"Not Pending","title":"Flower Planting With No Adjacent","memory":"N/A","code":"class Solution {\n    public int[] gardenNoAdj(int N, int[][] paths) {\n        /*\n        instansiate N garden\n        connect the path\n        setUniqueFlowerType for each node\n        return int[] array of each garden's flower type\n        */\n        \n        Garden[] graph = new Garden[N];// array of gardens\n        for(int i=0; i<N; i++){\n            graph[i] = new Garden();\n        }\n        \n        // connect path\n        for(int[] path : paths){\n\t\t\t// -1 because of 0-based index\n            int p1 = path[0]-1;\n            int p2 = path[1]-1;\n            Garden garden1 = graph[p1];\n            Garden garden2 = graph[p2];\n\t\t\t// when garden1's neighbor is garden2, then garden2's neighbor should also be garden1\n            garden1.connectedGardens.add(garden2);\n            garden2.connectedGardens.add(garden1);\n        }\n        \n        int idx = 0;\n        int[] res = new int[N];\n        for(Garden garden : graph){\n            garden.setUniqueFlowerType();\n            res[idx++] = garden.flowerType;\n        }\n        \n        return res;\n    }\n}","compare_result":null,"title_slug":"flower-planting-with-no-adjacent","has_notes":false}