{"id":933535253,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681462657,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/933535253/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"44.4 MB","code":"class Solution {\n    public int findTheCity(int n, int[][] edges, int distanceThreshold) {\n        int[][] cost= new int[n][n];\n        int m=edges.length;\n        \n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                if(i!=j)\n                    cost[i][j]=(int)1e9;\n                \n            }\n        }\n        \n        for(int i=0;i<m;i++){\n            //bidirectional\n            cost[edges[i][0]][edges[i][1]]=edges[i][2];\n            cost[edges[i][1]][edges[i][0]]=edges[i][2];\n        }\n        \n        //Floyd Warshall Algorithm\n        for(int via=0;via<n;via++){\n            for(int i=0;i<n;i++){\n                for(int j=0;j<n;j++){\n                    cost[i][j]=Math.min(cost[i][j],cost[i][via]+cost[via][j]);\n                }\n            }\n        }\n        \n        // calcuating city with the smallest number of neighbors at a val<=distanceThreshold\n        int cntNode=Integer.MAX_VALUE; // random value (unboxing)\n        int cityNum=Integer.MAX_VALUE; // random value (unboxing)\n        // doing in reverse coz they want max value, there're multiple ways of doing this\n        for(int i=n-1;i>=0;i--){\n            int cnt=0;\n            for(int j=0;j<n;j++){\n                if(cost[i][j]<=distanceThreshold)\n                    cnt++;\n            }\n            if(cntNode>cnt){ // can use cntNode>=cnt if i = 0-> n-1\n                cntNode=cnt;\n                cityNum=i;\n            }\n        }\n        \n        return cityNum;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance","has_notes":false}