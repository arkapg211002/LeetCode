{"id":912752661,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678463408,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/912752661/","is_pending":"Not Pending","title":"Smallest String Starting From Leaf","memory":"43.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    String minString = \"\";\n    public String smallestFromLeaf(TreeNode root) {\n        traverse(root,\"\");\n        return minString;\n    }\n    private void traverse(TreeNode root, String current)\n    {\n        if(root == null)\n        return;\n\n        current = \"\" + (char)(root.val + 'a') + current;\n\n        if(root.left == null && root.right == null)\n        {\n            if(minString.compareTo(\"\") == 0)\n            minString = current;\n            else\n            minString = current.compareTo(minString) < 0 ? current : minString;\n        }\n        traverse(root.left,current);\n        traverse(root.right,current);\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-string-starting-from-leaf","has_notes":false}