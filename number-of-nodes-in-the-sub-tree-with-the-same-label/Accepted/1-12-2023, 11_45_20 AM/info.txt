{"id":876599613,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1673504120,"status":10,"status_display":"Accepted","runtime":"292 ms","url":"/submissions/detail/876599613/","is_pending":"Not Pending","title":"Number of Nodes in the Sub-Tree With the Same Label","memory":"137.1 MB","code":"class Solution \n{\n    List<Integer>[] canVisit;\n    public int[] countSubTrees(int n, int[][] edges, String labels) \n    {\n        canVisit = new ArrayList[n];\n        for(int i=0; i<n; i++)\n            canVisit[i] = new ArrayList<>();\n        for(int[] edge : edges)\n        {\n            canVisit[edge[0]].add(edge[1]);\n            canVisit[edge[1]].add(edge[0]); \n        }\n        boolean[] visited = new boolean[n];\n        int[] answer = new int[n];\n        helper(0,labels.toCharArray(),answer,visited);\n        return answer;\n    }\n    Map<Character,Integer> helper(int node, char[] labels, int[] answer, boolean[] visited)\n    {\n        Map<Character,Integer> currMap = new HashMap<>();\n        visited[node] = true; \n        for(int i : canVisit[node])\n        {\n            if(visited[i]) continue;\n            Map<Character,Integer> map = helper(i, labels, answer, visited);\n            for (var entry : map.entrySet()) \n            {\n                currMap.put(entry.getKey(), currMap.getOrDefault(entry.getKey(),0)+ + entry.getValue());\n            }\n        }\n        currMap.put(labels[node], currMap.getOrDefault(labels[node],0)+1);\n        answer[node] = currMap.get(labels[node]);\n        return currMap;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-nodes-in-the-sub-tree-with-the-same-label","has_notes":false}