{"id":875848749,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1673407020,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/875848749/","is_pending":"Not Pending","title":"Minimum Time to Collect All Apples in a Tree","memory":"85.5 MB","code":"class Solution {\n    static int ans=0;\n    public boolean dfs(List<List<Integer>> graph,int src,List<Boolean> hasApple,boolean[] visited){\n\n        boolean ch=false;\n        visited[src]=true;\n        for(int nbr:graph.get(src)){\n            if(!visited[nbr]){\n            boolean a=dfs(graph,nbr,hasApple,visited);\n            if(a){\n              ans+=2;\n              ch=true;\n            }\n            }\n        }\n        if(ch || hasApple.get(src))\n        return true;\n        return false;\n    }\n    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {\n\n        List<List<Integer>> graph=new ArrayList<List<Integer>>();\n\n        for(int i=0;i<=n;i++){\n            graph.add(new ArrayList<>());\n        }\n\n        for(int i=0;i<edges.length;i++){\n           graph.get(edges[i][0]).add(edges[i][1]);\n           graph.get(edges[i][1]).add(edges[i][0]);\n        }\n\n        boolean[] visited=new boolean[n+1];\n        ans=0;\n\n        boolean a=dfs(graph,0,hasApple,visited);\n\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"minimum-time-to-collect-all-apples-in-a-tree","has_notes":false}