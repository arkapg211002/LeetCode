{"id":940766784,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682622428,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/940766784/","is_pending":"Not Pending","title":"N-Queens II","memory":"N/A","code":"class Solution {\npublic int totalNQueens(int n) {\n  boolean[][] board = new boolean[n][n];\n  return queens(board,0);\n    \n}\nint queens(boolean[][] board,int row)\n{\n\tif(row==board.length){\n        return 1;\n    }\n    \n    int count = 0;\n    // Placing Queens and Checking for every row and column\n    for(int col=0;col<board.length;col++){\n        //place queen if Safe\n        if(isSafe(board,row,col)){\n            board[row][col] = true;\n            count += queens(board,row+1); //Recursive call\n            board[row][col] = false;    // Backtrack\n        }\n    }\n    return count;\n}\n\nboolean isSafe(boolean[][] board, int row ,int col){\n    \n    // Vertical row\n    for(int i=0;i<row;i++){\n        if(board[i][col])\n            return false;\n    }\n    \n    // Left diagonal\n    int maxLeft = Math.min(row,col);\n    for(int i=1;i<=maxLeft;i++){\n        if(board[row-i][col-i]){\n            return false;\n        }\n    }\n    \n    // Right diagonal\n    int maxRight = Math.min(row,board.length-col-1);\n    for(int i=1;i<=maxRight;i++){\n        if(board[row-i][col+i]){\n            return false;\n        }\n    }\n    return true;\n}","compare_result":null,"title_slug":"n-queens-ii","has_notes":false}