{"id":906515855,"lang":"java","lang_name":"Java","time":"2 months, 1 week","timestamp":1677593087,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/906515855/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n//2L4LnRnRn\n//  2\n//(4LnRn) (n)\n// \n//   2\n//  4 (n)\n// (n) (n)\n\nclass Solution {\n\n    private Map<MyTreeNode, Integer> countMap = new HashMap<>();\n    private List<TreeNode> duplicates = new LinkedList<>();\n\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        dfs(root);\n        return duplicates;\n    }\n\n    private MyTreeNode dfs(TreeNode node) {\n        if(node == null) {\n            return null;\n        }\n\n        MyTreeNode left = dfs(node.left);\n        MyTreeNode right = dfs(node.right);\n\n        int prime = 31;\n        int hash = 1;\n        hash = hash * prime + node.val;\n        if(left != null) {\n            hash = hash * prime + left.hash;\n        }\n\n        if(right != null) {\n            hash = hash * prime + right.hash;\n        }\n\n        MyTreeNode myNode = new MyTreeNode(hash, node.val, left, right);\n        int count = countMap.getOrDefault(myNode, 0) + 1;\n        countMap.put(myNode, count);\n        if(count == 2) {\n            duplicates.add(node);\n        }\n\n        return myNode;\n    }\n\n    private class MyTreeNode {\n        private int hash;\n        private int val;\n        private MyTreeNode left;\n        private MyTreeNode right;\n\n        public MyTreeNode(int h, int v, MyTreeNode l, MyTreeNode r) {\n            this.hash = h;\n            this.val = v;\n            this.left = l;\n            this.right = r;\n        }\n\n        @Override\n        public int hashCode() {\n            return hash;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            MyTreeNode node = (MyTreeNode) o;\n            return this.hash == node.hash && this.val == node.val && equals(node.left, this.left) && equals(node.right, this.right);\n        }\n\n        private boolean equals(MyTreeNode a, MyTreeNode b) {\n            if(a == null && b == null) {\n                return true;\n            }\n\n            if(a == null || b == null) {\n                return false;\n            }\n\n            return a.equals(b);\n        }\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false}