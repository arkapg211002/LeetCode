{"id":802885382,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1663507335,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/802885382/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"48.6 MB","code":"class Solution {\n    \n    public int trap(int[] height) {\n        \n        int n = height.length, ans = 0, i;\n        \n        // store left max for every elevation map in array\n        // store -1 if rain water can't trapped by any elevation map, else store max \n        int[] left = new int[n];\n        left[0] = height[0];\n        for(i = 1; i < n; i++)\n            left[i] = Math.max(left[i-1], height[i]);\n        \n        // store right max for every elevation map in array\n        int[] right = new int[n];\n        right[n-1] = height[n-1];\n        for(i = n-2; i >= 0; i--)\n            right[i] = Math.max(right[i+1], height[i]);\n        \n        // compare left and right max for every elvation map\n        // for ith elevation map trapped water will be min(leftmax, rightmax)-height[i]\n        for(i = 0; i < n; i++)\n            ans += Math.max(0, Math.min((left[i]-height[i]), (right[i]-height[i])));\n        \n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trapping-rain-water","has_notes":false}