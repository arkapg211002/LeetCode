{"id":912192864,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678380605,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/912192864/","is_pending":"Not Pending","title":"Print Binary Tree","memory":"42.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int getHeight(TreeNode node){\n        if(node == null || (node.left==null && node.right==null)){\n            return 0;\n        }\n        return (Math.max(getHeight(node.left),getHeight(node.right))+1);\n    }\n    void printTreeUtil(TreeNode node,String [][]treeMat, int rowInd, int colInd, int height){\n\n        if(node == null){\n            return;\n        }\n\n        treeMat[rowInd][colInd] =   Integer.toString(node.val);\n        printTreeUtil(node.left,treeMat,rowInd + 1, colInd - (int)Math.pow(2,height-rowInd-1),height);\n        printTreeUtil(node.right,treeMat,rowInd + 1, colInd + (int)Math.pow(2,height-rowInd-1),height);\n    }\n    public List<List<String>> printTree(TreeNode root) {\n        \n        int height = getHeight(root);\n        int rows = height + 1;\n        int cols = (int)Math.pow(2,height+1) - 1;\n\n        String [][]treeMat = new String[rows][cols];\n        List<List<String>> res = new ArrayList<List<String>>();\n        printTreeUtil(root,treeMat,0,(cols-1)/2,height);\n        int i,j;\n        for(i=0;i<rows;i++){\n            res.add(new ArrayList<String>());\n            for(j=0;j<cols;j++){\n                if(treeMat[i][j] != null){\n                    res.get(i).add(treeMat[i][j]);\n                }\n                else{\n                    res.get(i).add(\"\");\n                }\n            }\n        }\n\n       return res;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"print-binary-tree","has_notes":false}