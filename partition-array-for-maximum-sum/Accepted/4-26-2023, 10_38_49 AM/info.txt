{"id":939871368,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1682485729,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/939871368/","is_pending":"Not Pending","title":"Partition Array for Maximum Sum","memory":"41.8 MB","code":"class Solution {\n    public int maxSumAfterPartitioning(int[] arr, int k) {\n        int dp[]=new int[arr.length];\n        Arrays.fill(dp,-1);\n        return f(0,k,arr,arr.length,dp);\n    }\n    public int f(int ind,int k,int arr[],int n,int dp[])\n    {\n        if(ind==n)return 0;\n        if(dp[ind]!=-1)return dp[ind];\n        int maxele=Integer.MIN_VALUE,maxsum=Integer.MIN_VALUE;\n        int last=(int)Math.min(n,ind+k);\n        int c=0;\n        for(int j=ind;j<last;j++)\n        {\n            c+=1;\n            maxele=(int)Math.max(maxele,arr[j]);\n            int res=(c*maxele)+f(j+1,k,arr,n,dp);\n            maxsum=(int)Math.max(maxsum,res);\n        }\n        return dp[ind]=maxsum;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"partition-array-for-maximum-sum","has_notes":false}