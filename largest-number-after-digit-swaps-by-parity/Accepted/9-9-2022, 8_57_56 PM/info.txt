{"id":795624914,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1662737276,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/795624914/","is_pending":"Not Pending","title":"Largest Number After Digit Swaps by Parity","memory":"40.8 MB","code":"class Solution {\n    public int largestInteger(int n) {\n        List<Integer>e=new ArrayList<>();\n        List<Integer>o=new ArrayList<>();\n        List<Integer>num=new ArrayList<>();\n        while(n>0)\n        {\n            num.add(n%10);\n            if((n%10)%2==0)e.add(n%10);\n            else o.add(n%10);\n            n/=10;\n        }\n        Collections.reverse(num);\n        Collections.sort(e);\n        Collections.reverse(e);\n        Collections.sort(o);\n        Collections.reverse(o);\n        int eve=0,odd=0,s=0;\n        for(int i=0;i<num.size();i++)\n        {\n            if(num.get(i)%2==0)\n            {\n                s=(s*10)+e.get(eve);\n                eve+=1;\n            }\n            else \n            {\n                s=(s*10)+o.get(odd);\n                odd+=1;\n            }\n        }\n        return s;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number-after-digit-swaps-by-parity","has_notes":false}