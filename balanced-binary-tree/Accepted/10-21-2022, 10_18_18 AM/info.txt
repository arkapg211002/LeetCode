{"id":827075847,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1666327698,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/827075847/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n         if (root == null) {\n            return true;\n    //All Nodes in the tree have an Absolute Difference of Left Height & Right Height not more than 1.\n        } else if (Math.abs(height(root.left) - height(root.right)) > 1) {\n            return false;\n        } else {\n            return isBalanced(root.left) && isBalanced(root.right); \n        }\n    }\n    \n    public static int height(TreeNode root){\n        if(root == null){\n            return 0;\n        }\n        int lheight = height(root.left);\n        int rheight = height(root.right);\n        return Math.max(lheight,rheight)+1;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false}