{"id":868045598,"lang":"java","lang_name":"Java","time":"4 months, 1 week","timestamp":1672402224,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/868045598/","is_pending":"Not Pending","title":"All Paths From Source to Target","memory":"44.1 MB","code":"class Solution {\n    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n\tvar paths = new ArrayList<List<Integer>>();\n\tdfs(0, new ArrayDeque<>(List.of(0)), paths, graph);\n\treturn paths;\n}\n\n// Recursive equation --> path(A, B) = A + path(neighbor of A, B).\nprivate void dfs(int node, Deque<Integer> path, List<List<Integer>> paths, int[][] graph) {\n\tif (node == graph.length - 1) \n\t\tpaths.add(List.copyOf(path));\n\telse \n\t\tfor (var neighbor : graph[node]) {\n\t\t\tpath.addLast(neighbor);\n\t\t\tdfs(neighbor, path, paths, graph);\n\t\t\tpath.removeLast();\n\t\t}\n}\n}","compare_result":"111111111111111111111111111111","title_slug":"all-paths-from-source-to-target","has_notes":false}