{"id":933432538,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681448526,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/933432538/","is_pending":"Not Pending","title":"Number of Provinces","memory":"43.4 MB","code":"class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int vis[]=new int[isConnected.length];\n        ArrayList<ArrayList<Integer>>l=new ArrayList<>();\n        for(int i=0;i<isConnected.length;i++)l.add(new ArrayList<>());\n        for(int i=0;i<isConnected.length;i++)\n        {\n            for(int j=0;j<isConnected[0].length;j++)\n            {\n                if(isConnected[i][j]==1)\n                {\n                    l.get(i).add(j);\n                    l.get(j).add(i);\n                }\n            }\n        }\n        int c=0;\n        for(int i=0;i<vis.length;i++)\n        {\n            if(vis[i]==0)\n            {\n                c+=1;\n                dfs(i,l,vis);\n            }\n        }\n        return c;\n    }\n    public void dfs(int node,ArrayList<ArrayList<Integer>>l,int vis[])\n    {\n        vis[node]=1;\n        for(Integer it:l.get(node))\n        {\n            if(vis[it]==0)\n                dfs(it,l,vis);\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false}