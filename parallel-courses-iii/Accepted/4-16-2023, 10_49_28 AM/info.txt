{"id":934538867,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1681622368,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/934538867/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"68.9 MB","code":"class Solution {\n    public int minimumTime(int n, int[][] relations, int[] time) {\n        List<Integer> adj[] = new ArrayList[n];\n        int indegree[] = new int[n];\n        int completionTime[] = new int[n];\n        for(int i=0; i<n; i++) adj[i] = new ArrayList<>();\n        for(int relation[]: relations){\n            int u = relation[0]-1, v = relation[1]-1;\n            adj[u].add(v);\n            indegree[v]++;\n        }\n        Queue<Integer> q = new LinkedList<>();\n        for(int i=0; i<n; i++){\n            if(indegree[i] == 0){ // if no prerequisite add it to queue\n                completionTime[i] = time[i];\n                q.add(i);\n            }\n        }\n        \n        while(!q.isEmpty()){\n            int u = q.poll();\n            for(int v: adj[u]){\n                completionTime[v] = Math.max(completionTime[v], completionTime[u] + time[v]);\n                if(--indegree[v] == 0){ // when all prerequisite are complete add the next course\n                    q.add(v);\n                }\n            }\n        }\n        int res=0;\n        for(int x: completionTime) res = Math.max(res, x);\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false}