{"id":916784009,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046041,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/916784009/","is_pending":"Not Pending","title":"Permutations II","memory":"43.8 MB","code":"class Solution {\n    int N;\n    List<List<Integer>> res;\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        res = new ArrayList<>();\n        N = nums.length;\n        Arrays.sort(nums);\n        helper(nums,new ArrayList<Integer>(),new ArrayList<Integer>());\n        return res;\n    }\n    \n    public void helper(int[] nums,List<Integer> curr,List<Integer> consumed){\n        if(curr.size() == N){\n            res.add(new ArrayList<Integer>(curr));\n        }\n        \n        for(int i=0;i<N;i++){\n            if(!consumed.contains(i)){\n                curr.add(nums[i]);\n                consumed.add(i);\n                helper(nums,curr,consumed);\n                curr.remove(curr.size()-1);\n                consumed.remove(consumed.size()-1);\n                while(i<N-1 && nums[i] == nums[i+1]){\n                        i++;\n                }\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false}