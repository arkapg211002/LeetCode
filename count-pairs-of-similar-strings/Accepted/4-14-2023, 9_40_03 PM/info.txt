{"id":933711192,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681488603,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/933711192/","is_pending":"Not Pending","title":"Count Pairs Of Similar Strings","memory":"41.9 MB","code":"class Solution {\n    public int similarPairs(String[] words) {\n        int len = words.length;\n        if (len == 1) return 0;\n        byte[][] alph = new byte[len][26];\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < len; i++) {\n            String word = words[i];\n            for (char c : word.toCharArray()) {\n                int idx = c - 'a';\n                if (alph[i][idx] == 0) alph[i][idx]++;\n            }\n            String s = new String(alph[i]);\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        int pairs = 0;\n        //I use arithmetic progression here\n        for (String key : map.keySet()) {\n            int freq = map.get(key);\n            if (freq > 1) {\n                pairs += (freq * (freq - 1)) / 2;\n            }\n        }\n        return pairs;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-pairs-of-similar-strings","has_notes":false}