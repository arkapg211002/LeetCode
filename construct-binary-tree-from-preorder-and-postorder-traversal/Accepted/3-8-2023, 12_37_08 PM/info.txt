{"id":911317568,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678259228,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/911317568/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Postorder Traversal","memory":"42.1 MB","code":"class Solution {\n\n    private Map<Integer,Integer> postMap = new HashMap<>();\n    private int preIdx;\n    \n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n        IntStream.range(0, post.length).forEach(i -> postMap.put(post[i], i));\n        return buildTree(0, post.length - 1, pre, post);\n    }\n    \n    private TreeNode buildTree(int lo, int hi, int[] pre, int[] post) {\n        if (preIdx == pre.length || lo > hi) return null;\n        \n        TreeNode root = new TreeNode(pre[preIdx++]);\n        if (lo == hi) return root;\n        \n        int leftSubRootPostIdx = postMap.get(pre[preIdx]);\n        \n        root.left = buildTree(lo, leftSubRootPostIdx, pre, post);\n        root.right = buildTree(leftSubRootPostIdx + 1, hi - 1, pre, post);\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-postorder-traversal","has_notes":false}