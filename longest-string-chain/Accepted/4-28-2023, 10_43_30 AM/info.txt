{"id":940937110,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682658810,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/940937110/","is_pending":"Not Pending","title":"Longest String Chain","memory":"42.1 MB","code":"class Solution {\n    public int longestStrChain(String[] words) {\n        int n=words.length;\n        int dp[]=new int[n];\n        Arrays.fill(dp,1);\n        Arrays.sort(words,(a,b)->\n        {\n            if(a.length()<b.length())return -1;\n            else if(a.length()>b.length())return 1;\n            else return 0;\n        });\n        int max=-1;\n        for(int i=0;i<n;i++)\n        {\n            for(int prev=0;prev<=i-1;prev++)\n            {\n                if(compare(words[i],words[prev])==true && dp[prev]+1>dp[i])\n                {\n                    dp[i]=dp[prev]+1;\n                }\n            }\n            max=(int)Math.max(max,dp[i]);\n        }\n        return max;\n    }\n    public boolean compare(String s1,String s2)\n    {\n        if(s1.length()!=s2.length()+1)return false;\n        int first=0,second=0;\n        while(first<s1.length())\n        {\n            if(second<s2.length() && s1.charAt(first)==s2.charAt(second))\n            {\n                first+=1;\n                second+=1;\n            }\n            else first+=1;\n        }\n        if(first==s1.length() && second==s2.length())return true;\n        else return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-string-chain","has_notes":false}