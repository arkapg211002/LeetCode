{"id":933416129,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681446139,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/933416129/","is_pending":"Not Pending","title":"Minimum Number of Vertices to Reach All Nodes","memory":"N/A","code":"class Solution {\n    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {\n        ArrayList<ArrayList<Integer>>l=new ArrayList<>();\n        for(int i=0;i<n;i++)\n            l.add(new ArrayList<>());\n        for(int i=0;i<edges.size();i++)\n            l.get(edges.get(i).get(0)).add(edges.get(i).get(1));\n        int a[][]=new int[n][2];\n        for(int i=0;i<n;i++)\n        {\n            a[i][0]=i;\n            a[i][1]=bfs(i,l,n);\n        }\n        Arrays.sort(a,(x,y)->\n        {\n            if(x[1]>y[1])return -1;\n            else if(x[1]<y[1])return 1;\n            else return 0;\n        });\n        int max=a[0][1];\n        List<Integer>ans=new ArrayList<>();\n        ans.add(a[0][0]);\n        for(int i=1;i<n;i++)\n        {\n            if(a[i][1]!=max)break;\n            else ans.add(a[i][0]);\n        }\n        return ans;\n    }\n    public int bfs(int node,ArrayList<ArrayList<Integer>>l,int n)\n    {\n        int v[]=new int[n];\n        Queue<Integer>q=new LinkedList<>();\n        q.add(node);\n        v[node]=1;\n        int c=0;\n        while(!q.isEmpty())\n        {\n            Integer m=q.poll();\n            for(Integer it:l.get(m))\n            {\n                if(v[it]==0)\n                {\n                    c+=1;\n                    q.add(it);\n                    v[it]=1;\n                }\n            }\n        }\n        return c;\n    }\n}","compare_result":"111111100111011101101010000001110000000100000000000000000000000000","title_slug":"minimum-number-of-vertices-to-reach-all-nodes","has_notes":false}