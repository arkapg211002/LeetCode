{"id":898576912,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1676476654,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/898576912/","is_pending":"Not Pending","title":"Add to Array-Form of Integer","memory":"43.7 MB","code":"class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> res=new LinkedList<>();\n        int carry=0;\n        int i=0;\n\t\t/*We always start computing from array's last element and k's last digit and will \n\t\tcompute sum and carry. We will iterate it till k and index of array both have existance. \n\t\tIf one of them gets exhausted the for loop below will not work.*/\n        for(i=num.length-1;i>=0 && k>0;i--){\n            int temp=num[i];\n            res.addFirst((temp+carry+(k%10))%10);\n            carry=(temp+carry+(k%10))/10;\n            k/=10;\n        }\n\t\t/*If for an instance your k is greater than the number that is present in the form of \n\t\tarray then the below while loop will work.*/\n        while(k!=0){\n            int compute=(k%10)+carry;\n            res.addFirst(compute%10);\n            carry=compute/10;\n            k/=10;\n        }\n\t\t/*If for an instance the number that is present in the form of array is greater than k \n\t\tthen the below for loop will work.*/\n        for(int r=i;r>=0;r--){\n            int temp=num[r];\n            res.addFirst((temp+carry)%10);\n            carry=(temp+carry)/10;\n        }\n\t\t/*If there is some carry still remaining at last then add it to beginning of the \n\t\tarraylist or linkedlist.*/\n        if(carry!=0)\n            res.addFirst(carry);\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-to-array-form-of-integer","has_notes":false}