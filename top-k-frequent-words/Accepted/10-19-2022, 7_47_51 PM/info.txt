{"id":825946307,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1666189071,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/825946307/","is_pending":"Not Pending","title":"Top K Frequent Words","memory":"42.5 MB","code":"class Solution {\n  public List<String> topKFrequent(String[] words, int k) {\n        \n        // map hold the word: counts\n        HashMap<String, Integer> map = new HashMap();\n        \n        // sort the map by frequency high->low order, sort words lexi order\n        PriorityQueue<Map.Entry<String, Integer>> heap = new PriorityQueue<>(\n            (a,b)->{\n                if(a.getValue() != b.getValue())\n                    return a.getValue().compareTo(b.getValue());\n                return -a.getKey().compareTo(b.getKey());\n            }\n        );\n        \n        // fill the map\n        for(String word: words){\n            map.merge(word, 1, Integer::sum);\n        }\n        \n        // put into heap\n        for(Map.Entry<String, Integer> entry: map.entrySet()){\n            heap.offer(entry);\n            if(heap.size() > k)\n                heap.poll();\n        }\n        \n        // pop out the answer\n        List<String> ans = new ArrayList();\n        while(heap.size() > 0)\n            ans.add(heap.poll().getKey());\n        \n        // check the order\n        Collections.reverse(ans);\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"top-k-frequent-words","has_notes":false}