{"id":941014341,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1682671873,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/941014341/","is_pending":"Not Pending","title":"Minimum Path Cost in a Grid","memory":"65.4 MB","code":"class Solution {\n    public int minPathCost(int[][] grid, int[][] moveCost) {\n        int row = grid.length, col = grid[0].length;\n        int[][] dp = new int[row][col];\n        for(int c = 0; c<col; c++){\n            dp[0][c] = grid[0][c];\n        }\n        for(int r = 1; r<row; r++){\n            for(int c = 0; c<col; c++){\n                dp[r][c] = getMin(grid, moveCost, r, c, dp);\n            }\n        }\n        int result = Integer.MAX_VALUE;\n        for(int k : dp[row-1])\n            result = Math.min(result, k);\n        return result;\n    }\n    public int getMin(int[][] grid, int[][] moveCost, int row, int col, int[][] dp){\n        int min = Integer.MAX_VALUE, previousRow = row-1;\n        \n        for(int c = 0; c<grid[0].length; c++)\n        {\n            min = Math.min(min, dp[previousRow][c] + grid[row][col] + moveCost[grid[previousRow][c]][col]);\n        }\n        return min;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"minimum-path-cost-in-a-grid","has_notes":false}