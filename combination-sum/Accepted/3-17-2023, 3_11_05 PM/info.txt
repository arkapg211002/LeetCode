{"id":916784187,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046065,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/916784187/","is_pending":"Not Pending","title":"Combination Sum","memory":"43 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        //Approach: Using sorting and recursion\n        List<List<Integer>> ans = new ArrayList<>();\n\n        //base case\n        if(candidates==null || candidates.length==0 || target<=0){\n            return ans;\n        }\n        \n        //sort our candidate array\n        Arrays.sort(candidates);\n\n        //call helper function\n        helper(candidates, target, 0, new ArrayList<>(), ans);\n\n        return ans;\n\n\n    }\n    //helper function\n    private void helper(int[] candidates, int target, int start, ArrayList<Integer> tempList, List<List<Integer>> ans){\n        //base condition, if target become 0\n        if(target==0){\n            ans.add(new ArrayList<>(tempList));\n            return;\n        }\n        //traverse \n        for(int i=start;i<candidates.length;i++){\n            //if candidates of i is greater than target than break\n            if(candidates[i]>target){\n                break;\n            }\n            //add element to tempList\n            tempList.add(candidates[i]);\n            //call recursion\n            helper(candidates, target-candidates[i], i, tempList, ans);\n            //remove element from tempList\n            tempList.remove(tempList.size()-1);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false}