{"id":916783528,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679045969,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/916783528/","is_pending":"Not Pending","title":"Combination Sum","memory":"N/A","code":"\n```****JAVA Solution Easy Approach****\npublic List<List<Integer>> combinationSum(int[] candidates, int target)\n{\n        List<List<Integer>> al = new ArrayList<>();\n\t\t//taking an List of List which will traverse via Call by reference through recursion\n        Combo(candidates, target, \"\", target, al);           // passing list of List in recursion logic\n        return al;                                                             // returning the list after Recursion ends\n    }\nstatic void Combo(int a[], int N, String ans, int max, List<List<Integer>> al)\n    {\n        if(N==0) //base Condition when our targets equals to 0\n        {\n            ArrayList<Integer> cl = new ArrayList<>();\n            StringTokenizer st = new StringTokenizer(ans.trim()); // Breaking the string ans into integers and adding them into list,( a new List will be created for each case when base condition get hit)\n            int n = st.countTokens();\n            for(int j=0 ; j<=n-1; j++)\n            {\n                cl.add(Integer.parseInt(st.nextToken()));\n            }\n            al.add(cl); //adding our list to--> list of list\n        }\n        else\n        {\n            for(int i=0; i<a.length; i++)\n            {\n                if(N-a[i]>=0&& a[i]<=max) //taking max variable for stoping the duplication of answer \n                {\n                Combo(a, N-a[i], ans+a[i]+\" \", a[i], al); // passing max as last a[i] which we included in our ans\n                }\n            }\n        }\n    }","compare_result":null,"title_slug":"combination-sum","has_notes":false}