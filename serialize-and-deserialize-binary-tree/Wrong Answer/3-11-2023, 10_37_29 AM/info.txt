{"id":913030987,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678511249,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/913030987/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        if(root==null)return \"n\";\n        else return root.val+\"-\"+serialize(root.left)+\"-\"+serialize(root.right);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        LinkedList<Character>q=new LinkedList<>();\n        for(int i=0;i<data.length();i++)\n        {\n            if(data.charAt(i)!='-')q.add(data.charAt(i));\n        }\n        return insert(q);\n    }\n\n    public TreeNode insert(LinkedList<Character>q)\n    {\n        char ch=q.removeFirst();\n        if(ch=='n')return null;\n        TreeNode root=new TreeNode(Integer.parseInt(Character.toString(ch)));\n        root.left=insert(q);\n        root.right=insert(q);\n        return root;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111101101100000000000000000000000000000000000","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false}