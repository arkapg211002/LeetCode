{"id":933922280,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681530228,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/933922280/","is_pending":"Not Pending","title":"The Time When the Network Becomes Idle","memory":"100.7 MB","code":"import java.util.*; \nclass Node implements Comparator<Node>\n{\n    private int v;\n    private int weight;\n    Node(int _v, int _w) { v = _v; weight = _w; }\n    Node() {}\n    int getV() { return v; }\n    int getWeight() { return weight; }\n    @Override\n    public int compare(Node node1, Node node2) \n    { \n        if (node1.weight < node2.weight) \n            return -1; \n        if (node1.weight > node2.weight) \n            return 1; \n        return 0; \n    } \n}\nclass Solution {\n    public int shortestPath(int s, ArrayList<ArrayList<Node>> adj, int N,int patience[])\n    {\n        int dist[] = new int[N];\n        for(int i = 0;i<N;i++) dist[i] = 100000000;\n        dist[s] = 0; \n        PriorityQueue<Node> pq = new PriorityQueue<Node>(N, new Node());\n        pq.add(new Node(s, 0));\n        while(pq.size() > 0) {\n            Node node = pq.poll();\n            \n            for(Node it: adj.get(node.getV())) {\n                if(dist[node.getV()] + it.getWeight() < dist[it.getV()]) {\n                    dist[it.getV()] = dist[node.getV()] + it.getWeight(); \n                    pq.add(new Node(it.getV(), dist[it.getV()]));\n                }\n            }\n        }\n        int res = Integer.MIN_VALUE;\n        for(int i = 1; i < N ; i++) \n        {\n            int num = (2*dist[i])/patience[i];\n            if((2*dist[i])%patience[i] == 0) \n                num-=1;\n            int time = num*patience[i];\n            res = Math.max(res,time+ 2*dist[i]+1);\n        }\n        return res;\n    }\n    public int networkBecomesIdle(int[][] edges, int[] patience) {\n        int n=patience.length;\n        ArrayList<ArrayList<Node>>l=new ArrayList<>();\n        for(int i=0;i<n;i++)l.add(new ArrayList<Node>());\n        for(int r[]:edges)\n        {\n            l.get(r[0]).add(new Node(r[1],1));\n            l.get(r[1]).add(new Node(r[0],1));\n        }\n        return shortestPath(0, l, n,patience); \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"the-time-when-the-network-becomes-idle","has_notes":false}