{"id":933724248,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681490415,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/933724248/","is_pending":"Not Pending","title":"Flood Fill","memory":"43.8 MB","code":"// Runtime: 1 ms, faster than 90.98% of Java online submissions for Flood Fill.\n// Time Complexity : O(n*m)\n// Space Complexity : O(n*m)\nclass Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int color) {\n        // Avoid infinite loop if the new and old colors are the same...\n        if(image[sr][sc] == color) return image;\n        // Run the fill function starting at the position given...\n        fill(image, sr, sc, color, image[sr][sc]);\n        return image;\n    }\n    public void fill(int[][] image, int sr, int sc, int color, int cur) {\n        // If sr is less than 0 or greater equals to the length of image...\n        // Or, If sc is less than 0 or greater equals to the length of image[0]...\n        if(sr < 0 || sr >= image.length || sc < 0 || sc >= image[0].length) return;\n        // If image[sr][sc] is not equal to previous color...\n        if(cur != image[sr][sc]) return;\n        // Update the image[sr][sc] as a color...\n        image[sr][sc] = color;\n        // Make four recursive calls to the function with (sr-1, sc), (sr+1, sc), (sr, sc-1) and (sr, sc+1)...\n        fill(image, sr-1, sc, color, cur);\n        fill(image, sr+1, sc, color, cur);\n        fill(image, sr, sc-1, color, cur);\n        fill(image, sr, sc+1, color, cur);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill","has_notes":false}