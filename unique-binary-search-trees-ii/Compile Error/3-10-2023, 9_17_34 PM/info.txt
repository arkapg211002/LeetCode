{"id":912751327,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678463254,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/912751327/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"N/A","code":"public static List<TreeNode> generateTrees(int n) {\n    List<TreeNode>[] result = new List[n + 1];\n    result[0] = new ArrayList<TreeNode>();\n    if (n == 0) {\n        return result[0];\n    }\n\n    result[0].add(null);\n    for (int len = 1; len <= n; len++) {\n        result[len] = new ArrayList<TreeNode>();\n        for (int j = 0; j < len; j++) {\n            for (TreeNode nodeL : result[j]) {\n                for (TreeNode nodeR : result[len - j - 1]) {\n                    TreeNode node = new TreeNode(j + 1);\n                    node.left = nodeL;\n                    node.right = clone(nodeR, j + 1);\n                    result[len].add(node);\n                }\n            }\n        }\n    }\n    return result[n];\n}\n\nprivate static TreeNode clone(TreeNode n, int offset) {\n    if (n == null) {\n        return null;\n    }\n    TreeNode node = new TreeNode(n.val + offset);\n    node.left = clone(n.left, offset);\n    node.right = clone(n.right, offset);\n    return node;\n}","compare_result":null,"title_slug":"unique-binary-search-trees-ii","has_notes":false}