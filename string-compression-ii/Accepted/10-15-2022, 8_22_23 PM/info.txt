{"id":823002059,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1665845543,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/823002059/","is_pending":"Not Pending","title":"String Compression II","memory":"43.3 MB","code":"class Solution {\n    private int[][] dp;\n    private char[] chars;\n    private int n;\n    \n    public int getLengthOfOptimalCompression(String s, int k) {\n        this.chars = s.toCharArray();\n        this.n = s.length();\n        this.dp = new int[n][k+1];\n        for (int[] row: dp) {\n            Arrays.fill(row, -1);\n        }\n        return dp(0, k);\n    }\n    \n    private int dp(int i, int k) {\n        if (k < 0) return n;\n        if (n <= i + k) return 0;\n        \n        int ans = dp[i][k];\n        if (ans != -1) return ans; \n        ans = dp(i + 1, k - 1);\n        int length = 0, same = 0, diff = 0;\n        \n        for (int j=i; j < n && diff <= k; j++) {\n            \n            if (chars[j] == chars[i]) {\n                same++;\n                if (same <= 2 || same == 10 || same == 100) length++;\n            } else {\n                diff++; \n            }\n            ans = Math.min(ans, length + dp(j + 1, k - diff)); \n        }\n        dp[i][k] = ans;\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii","has_notes":false}