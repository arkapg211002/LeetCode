{"id":933398560,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681443280,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/933398560/","is_pending":"Not Pending","title":"Redundant Connection","memory":"43.2 MB","code":"class Solution {\n    public int[] findRedundantConnection(int[][] edges) {\n        par = new int[edges.length+1];\n        for (int i = 0; i < par.length; i++)\n            par[i] = i;\n        for (int[] e : edges)\n            if (find(e[0]) == find(e[1])) return e;\n            else union(e[0],e[1]);\n        return edges[0];\n    }\n    private int[] par;\n    private int find(int x) {\n        if (x != par[x]) par[x] = find(par[x]);\n        return par[x];\n    }\n    private void union(int x, int y) {\n        par[find(y)] = find(x);\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false}