{"id":924662714,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680159374,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/924662714/","is_pending":"Not Pending","title":"Divide Array in Sets of K Consecutive Numbers","memory":"52.7 MB","code":"class Solution {\n    // O(nlogn) time | O(n) space\n    public boolean isPossibleDivide(int[] nums, int k) {\n        if (nums.length % k != 0) return false;\n\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int n : nums) {\n            counts.put(n, counts.getOrDefault(n, 0) + 1);\n        }\n\n        List<Integer> keys = new ArrayList<>(counts.keySet());\n        Collections.sort(keys);\n\n        for (int key : keys) {\n            int sequences = counts.get(key);\n\n            while (sequences-- > 0) {\n                if (counts.get(key) == 0) continue;\n\n                int start = key;\n                int end = key + k - 1;\n\n                for (int val = start; val <= end; val++) {\n                    int valCount = counts.getOrDefault(val,0);\n                    if (valCount == 0) return false;\n                    counts.put(val, valCount - 1);\n                }\n            }\n            \n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"divide-array-in-sets-of-k-consecutive-numbers","has_notes":false}