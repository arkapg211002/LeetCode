{"id":933459451,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681452112,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/933459451/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"N/A","code":"class Node{\n    int u,v,w;\n    Node(int _u,int _v,int _w)\n    {\n        this.u=_u;\n        this.v=_v;\n        this.w=_w;\n    }\n    Node(){}\n    int getU(){return u;}\n    int getV(){return v;}\n    int getW(){return w;}\n}\nclass sortc implements Comparator<Node>\n{\n    @Override\n    public int compare(Node a,Node b)\n    {\n        if(a.getW()<b.getW())return -1;\n        else if(a.getW()>b.getW())return 1;\n        else return 0;\n    }\n}\nclass Solution {\n    public int up(int u,int p[])\n    {\n        if(u==p[u])return u;\n        int ulp=up(p[u],p);\n        return p[u]=ulp;\n    }\n    public void union(int u,int v,int p[],int r[])\n    {\n        int ulp=p[u];\n        int vlp=p[v];\n        if(ulp==vlp)return;\n        else if(r[u]<r[v])p[u]=v;\n        else if(r[v]<r[u])p[v]=u;\n        else\n        {\n            p[v]=u;\n            r[u]=r[u]+1;\n        }\n    }\n    public int kruskal(ArrayList<Node>l,int n)\n    {\n        Collections.sort(l,new sortc());\n        int r[]=new int[n],p[]=new int[n];\n        for(int i=0;i<n;i++)\n        {\n            r[i]=0;\n            p[i]=i;\n        }\n        int c=0;\n        for(Node it:l)\n        {\n            if(up(it.getU(),p)!=up(it.getV(),p))\n            {\n                c+=it.getW();\n                union(it.getU(),it.getV(),p,r);\n            }\n        }\n        return c;\n    }\n    public int minCostConnectPoints(int[][] points) {\n        ArrayList<Node>l=new ArrayList<>();\n        HashMap<String,Integer>h=new HashMap<>();\n        for(int i=0;i<points.length;i++)\n        {\n            String a=Integer.toString(points[i][0])+Integer.toString(points[i][1]);\n            h.put(a,i);\n        }\n        for(int i=0;i<points.length;i++)\n        {\n            String s=Integer.toString(points[i][0])+Integer.toString(points[i][1]);\n            for(int j=i;j<points.length;j++)\n            {\n                int d=(int)Math.abs(points[i][0]-points[j][0])+(int)Math.abs(points[i][1]-points[j][1]);\n                String st=Integer.toString(points[j][0])+Integer.toString(points[j][1]);\n                l.add(new Node(h.get(s),h.get(st),d));\n            }\n        }\n        return kruskal(l,points.length);\n    }\n}","compare_result":"110111000000000000000000000000000000000000000000000000000000000000000000","title_slug":"min-cost-to-connect-all-points","has_notes":false}