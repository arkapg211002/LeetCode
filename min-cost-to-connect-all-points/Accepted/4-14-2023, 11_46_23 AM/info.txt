{"id":933466469,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681452983,"status":10,"status_display":"Accepted","runtime":"529 ms","url":"/submissions/detail/933466469/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"56.6 MB","code":"import java.util.*; \n\nclass Node \n{\n\tprivate int u;\n    private int v;\n    private int weight;\n    \n    Node(int _u, int _v, int _w) { u = _u; v = _v; weight = _w; }\n    \n    Node() {}\n    \n    int getV() { return v; }\n    int getU() { return u; }\n    int getWeight() { return weight; }\n\n}\n\nclass SortComparator implements Comparator<Node> {\n\t@Override\n    public int compare(Node node1, Node node2) \n    { \n        if (node1.getWeight() < node2.getWeight()) \n            return -1; \n        if (node1.getWeight() > node2.getWeight()) \n            return 1; \n        return 0; \n   \n\n    } \n} \n\nclass Solution {\n    public int findPar(int u, int parent[]) {\n\t\tif(u==parent[u]) return u;\n\t\treturn parent[u] = findPar(parent[u], parent); \n\t}\n\tpublic void union(int u, int v, int parent[], int rank[]) {\n\t\tu = findPar(u, parent); \n\t\tv = findPar(v, parent);\n\t\tif(rank[u] < rank[v]) {\n        \tparent[u] = v;\n        }\n        else if(rank[v] < rank[u]) {\n        \tparent[v] = u; \n        }\n        else {\n        \tparent[v] = u;\n        \trank[u]++; \n        }\n\t}\n    public int KruskalAlgo(ArrayList<Node> adj, int N)\n    {\n        Collections.sort(adj, new SortComparator());\n        int parent[] = new int[N]; \n        int rank[] = new int[N];\n        for(int i = 0;i<N;i++) {\n        \tparent[i] = i; \n        \trank[i] = 0; \n        }\n        int costMst = 0;\n        for(Node it: adj) {\n        \tif(findPar(it.getU(), parent) != findPar(it.getV(), parent)) {\n        \t\tcostMst += it.getWeight(); \n        \t\tunion(it.getU(), it.getV(), parent, rank); \n        \t}\n        } \n        return costMst;\n    }\n    public int minCostConnectPoints(int[][] points) {\n        ArrayList<Node>l=new ArrayList<>();\n        for(int i=0;i<points.length;i++)\n        {\n            for(int j=i+1;j<points.length;j++)\n            {\n                int d=(int)Math.abs(points[i][0]-points[j][0])+(int)Math.abs(points[i][1]-points[j][1]);\n                l.add(new Node(i,j,d));\n\n            }\n        }\n        return KruskalAlgo(l,points.length);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false}