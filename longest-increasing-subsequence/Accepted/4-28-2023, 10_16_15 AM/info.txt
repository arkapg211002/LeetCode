{"id":940927541,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682657175,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/940927541/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"42.7 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n=nums.length;\n        int dp[]=new int[n];\n        Arrays.fill(dp,1);\n        int max=-1;\n        for(int i=0;i<n;i++)\n        {\n            for(int j=0;j<=i-1;j++)\n            {\n                if(nums[j]<nums[i] && dp[i]<dp[j]+1)\n                {\n                    dp[i]=dp[j]+1;\n                }\n            }\n            max=(int)Math.max(max,dp[i]);\n        }\n        return max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}