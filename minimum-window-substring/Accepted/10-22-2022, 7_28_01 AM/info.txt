{"id":827659086,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1666403881,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/827659086/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"42.9 MB","code":"class Solution {\n    public String minWindow(String s, String t) {\n        \n        if (t.length() > s.length() || t.equals(\"\"))\n            return \"\";\n        \n        Map<Character, Integer> tMap = new HashMap<>();\n        Map<Character, Integer> sMap = new HashMap<>();\n        \n        for(char c : t.toCharArray()){\n            tMap.put(c, tMap.getOrDefault(c, 0) + 1);\n            sMap.put(c, 0);\n        }\n        \n        int start=0, matched=0;\n        int minLength = s.length();\n        int[] result = new int[]{-1,-1};\n\t\t\n        for (int end=0; end < s.length(); end++){\n            char curr = s.charAt(end);\n            \n            // Check if current char is present in target, then update character count in source map\n            if(tMap.containsKey(curr)){\n                sMap.put(curr, sMap.get(curr) + 1);            \n                if(sMap.get(curr).equals(tMap.get(curr)))\n                    matched++;\n            }\n            \n            // When a valid window is found, try to reduce it until a valid window is not found\n            if(matched == tMap.size()){\n                // Iterate until the window is not valid\n                while(matched == tMap.size()){\n                    char first = s.charAt(start++);\n                    // If current char is a character in target, \n                    // then reduce its count from the sMap as we'll reduce its count\n                    if(sMap.containsKey(first)){\n                        sMap.put(first, sMap.get(first) - 1);\n                        // If count of first char in window < count in tMap, then reduce the matched count\n                        if(sMap.get(first) < tMap.get(first))\n                            matched--;\n                    }\n                }\n                // Update length if current length is smaller than previous\n                // Note - Check 1 character before start index as the start idx was already incremented in the while loop\n                if (end - (start - 1) < minLength){\n                    minLength = end - (start - 1) + 1;\n                    result[0] = start - 1;\n                    result[1] = end;\n                }\n            }\n        }\n        return result[0] != -1 ? s.substring(result[0], result[1] + 1) : \"\";\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false}