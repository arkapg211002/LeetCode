{"id":927042086,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1680503929,"status":10,"status_display":"Accepted","runtime":"199 ms","url":"/submissions/detail/927042086/","is_pending":"Not Pending","title":"Maximal Score After Applying K Operations","memory":"59.7 MB","code":"class Solution {\n    \n    public long maxKelements(int[] arr, int k) {\n        // Priorty Queue in reverse order is going to\n        // give the highest number awailable\n        PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());\n        int n = arr.length;\n        long answer = 0;\n\n        // Add all the elements in priorty queue\n        for(int i=0; i<n; i++){\n            queue.add(arr[i]);\n        }\n\n        //Loop k number of times as mentioned in question\n        for(int i=0; i<k; i++){\n\n        //Now grab the element from queue by poll function\n        // (it will give highest awailable always)\n            int temp = queue.poll();\n            answer += temp;\n\n        // After adding highest element in our answer\n        // Give that number back to queue by doing the-\n        //-operation as told in question ceil(num[i]/3)\n            double s = (double)temp/3;\n            queue.add((int)Math.ceil(s));\n        }\n        return answer;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"maximal-score-after-applying-k-operations","has_notes":false}