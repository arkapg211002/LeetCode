{"id":913102516,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1678521274,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/913102516/","is_pending":"Not Pending","title":"Height of Binary Tree After Subtree Removal Queries","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer>l=new ArrayList<>();\n    public int[] treeQueries(TreeNode root, int[] queries) {\n        int a[]=new int[queries.length];\n        for(int i=0;i<queries.length;i++)\n        {\n            TreeNode p=root;\n            p=remove(p,queries[i]);\n            int h=height(p);\n            a[i]=h-1;\n        }\n        //preorder(root);\n        //System.out.println(l);\n        return a;\n    }\n    public int height(TreeNode root)\n    {\n        if(root==null)return 0;\n        int lh=height(root.left);\n        int rh=height(root.right);\n        return (int)Math.max(lh,rh)+1;\n    }\n    public TreeNode remove(TreeNode root,int k)\n    {\n        if(root==null)return null;\n        root.left=remove(root.left,k);\n        root.right=remove(root.right,k);\n        if(root.val==k)\n        {\n            root=null;\n            return root;\n        }\n        //root.left=remove(root.left,k);\n        \n        return root;\n    }\n    /*public void preorder(TreeNode root)\n    {\n        if(root==null)return;\n        l.add(root.val);\n        preorder(root.left);\n        preorder(root.right);\n    }*/\n}","compare_result":"1000101111000001000000000000000000000000","title_slug":"height-of-binary-tree-after-subtree-removal-queries","has_notes":false}