{"id":940119329,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1682522097,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940119329/","is_pending":"Not Pending","title":"Frog Position After T Seconds","memory":"N/A","code":"class Solution {\n    double prob;\n    public double frogPosition(int n, int[][] edges, int t, int target) {\n        ArrayList<ArrayList<Integer>>l=new ArrayList<>();\n        for(int i=0;i<n;i++)l.add(new ArrayList<>());\n        for(int r[]:edges)\n        {\n            l.get(r[0]-1).add(r[1]-1);\n            l.get(r[1]-1).add(r[0]-1);\n        }\n        int v[]=new int[n];\n        Arrays.fill(v,-1);\n        dfs(0,v,l,t,target-1,1.0);\n        return prob;\n    }\n    public void dfs(int node,int v[],ArrayList<ArrayList<Integer>>l,int t,int target,double p)\n    {\n        int len=0;\n        if(node==0)len=l.get(node).size();\n        else len=l.get(node).size()-1;\n        v[node]=1;\n        if(node==target)\n        {\n            if(t==0)prob=p;\n            else if(t>0 && len>=0)prob=p;\n        }\n        if(t>0)\n        {\n            for(Integer it:l.get(node))\n            {\n                if(v[it]==-1)\n                    dfs(it,v,l,t-1,target,p/len);\n            }\n        }\n    }\n\n}","compare_result":"111101100111111011101110010101010111011001001001000011111111110011100010101100110100110011000001001010000100001101111010001011111010010011010100100010100100111011100000111111100001011110001101011100111111","title_slug":"frog-position-after-t-seconds","has_notes":false}