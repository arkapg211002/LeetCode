{"id":862989764,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1671590977,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/862989764/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"71.8 MB","code":"class Solution {\n    public boolean possibleBipartition(int N, int[][] dislikes) {\n    // 1. Create the graph\n\tList<Integer> dislikeArray[] = new List[N + 1];\n    for(int i = 0; i < dislikeArray.length; i++) {\n        dislikeArray[i] = new ArrayList<Integer>();\n    }\n    for(int i = 0; i < dislikes.length; i++) {\n        dislikeArray[dislikes[i][0]].add(dislikes[i][1]);\n        dislikeArray[dislikes[i][1]].add(dislikes[i][0]);\n    }\n\t\n\t// 2. Color the graph\n    int group[] = new int[N + 1];\n    Arrays.fill(group, -1);\n    for(int i = 1; i <= N; i++) {\n        if( group[i] == -1 && !paint(group, i, dislikeArray, 0) )\n            return false;\n    }\n    return true;\n}\n\npublic boolean paint(int group[], int index, List<Integer> dislikeArray[], int color) {\n    group[index] = color;\n    for(int i = 0; i < dislikeArray[index].size(); i++) {\n        int nextIndex = dislikeArray[index].get(i);\n        if( group[nextIndex] == color )\n            return false;\n        if( group[nextIndex] == -1 && !paint(group, nextIndex, dislikeArray, 1 - color))\n            return false;\n    }\n    return true;\n}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition","has_notes":false}