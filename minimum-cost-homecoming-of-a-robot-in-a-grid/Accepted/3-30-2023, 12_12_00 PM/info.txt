{"id":924656008,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680158520,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/924656008/","is_pending":"Not Pending","title":"Minimum Cost Homecoming of a Robot in a Grid","memory":"62.5 MB","code":"class Solution {\n\tpublic int minCost(int[] startPos, int[] homePos, int[] rowCosts, int[] colCosts) {\n\t\tint sum = 0;\n\t\twhile (startPos[0] != homePos[0]) {\n\t\t\tif (startPos[0] < homePos[0]) {\n\t\t\t\tsum += rowCosts[++startPos[0]];\n\t\t\t} else {\n\t\t\t\tsum += rowCosts[--startPos[0]];\n\t\t\t}\n\t\t}\n\t\twhile (startPos[1] != homePos[1]) {\n\t\t\tif (startPos[1] < homePos[1]) {\n\t\t\t\tsum += colCosts[++startPos[1]];\n\t\t\t} else {\n\t\t\t\tsum += colCosts[--startPos[1]];\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-homecoming-of-a-robot-in-a-grid","has_notes":false}