{"id":933944230,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681534605,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/933944230/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"N/A","code":"class Solution {\n    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n        double g[][]=new double[n][n];\n        for(double r[]:g)Arrays.fill(r,1.00000);\n        for(int i=0;i<edges.length;i++)\n        {\n            g[edges[i][0]][edges[i][1]]=succProb[i];\n            g[edges[i][1]][edges[i][0]]=succProb[i];\n        }\n        double dist[]=new double[n];\n        boolean spt[]=new boolean[n];\n        Arrays.fill(dist,0.00000);\n        dist[start]=1.00000;\n        for(int i=0;i<n-1;i++)\n        {\n            int u=min(dist,spt,n);\n            if(u==-1)continue;\n            spt[u]=true;\n            for(int v=0;v<n;v++)\n            {\n                if(!spt[v] && g[u][v]!=1.00000 && dist[u]!=0.00000 && dist[u]*g[u][v]>dist[v])\n                    dist[v]=dist[u]*g[u][v];\n            }\n        }\n        if(dist[end]<=0.00000)return 0.00000;\n        else return dist[end];\n    }\n    public int min(double dist[],boolean spt[],int n)\n    {\n        int minindex=-1;\n        double max=0.00000;\n        for(int i=0;i<n;i++)\n        {\n            if(!spt[i] && dist[i]>=max)\n            {\n                max=dist[i];\n                minindex=i;\n            }\n        }\n        return minindex;\n    }\n}","compare_result":"111111111100000000","title_slug":"path-with-maximum-probability","has_notes":false}