{"id":933950400,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681535694,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/933950400/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"54.4 MB","code":"import java.util.*; \n\nclass Node implements Comparator<Node>\n{\n    private int v;\n    private double weight;\n    \n    Node(int _v, double _w) { v = _v; weight = _w; }\n    \n    Node() {}\n    \n    int getV() { return v; }\n    double getWeight() { return weight; }\n    \n    @Override\n    public int compare(Node node1, Node node2) \n    { \n        if (node1.weight > node2.weight) \n            return -1; \n        if (node1.weight < node2.weight) \n            return 1; \n        return 0; \n    } \n}\nclass Solution {\n    public double shortestPath(int s, ArrayList<ArrayList<Node>> adj, int N, int end)\n    {\n        double dist[] = new double[N];\n        \n        for(int i = 0;i<N;i++) dist[i] = 0.00000;\n        dist[s] = 1.00000; \n        \n        PriorityQueue<Node> pq = new PriorityQueue<Node>(N, new Node());\n        pq.add(new Node(s, 1.00000));\n        \n        while(pq.size() > 0) {\n            Node node = pq.poll();\n            \n            for(Node it: adj.get(node.getV())) {\n                if(dist[node.getV()] * it.getWeight() > dist[it.getV()]) {\n                    dist[it.getV()] = dist[node.getV()] * it.getWeight(); \n                    pq.add(new Node(it.getV(), dist[it.getV()]));\n                }\n            }\n        }\n        \n        if(dist[end]==0.00000)return 0.00000;\n        else return dist[end];\n    }\n    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n        ArrayList<ArrayList<Node>>l=new ArrayList<>();\n        for(int i=0;i<n;i++)l.add(new ArrayList<Node>());\n        int i=0;\n        for(int r[]:edges)\n        {\n            l.get(r[0]).add(new Node(r[1],succProb[i]));\n            l.get(r[1]).add(new Node(r[0],succProb[i]));\n            i+=1;\n        }\n        return shortestPath(start, l, n, end); \n    }\n    \n}","compare_result":"111111111111111111","title_slug":"path-with-maximum-probability","has_notes":false}