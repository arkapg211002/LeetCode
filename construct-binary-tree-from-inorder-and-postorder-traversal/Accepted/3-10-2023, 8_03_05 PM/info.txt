{"id":912716476,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678458785,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/912716476/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Map<Integer,Integer>map=new HashMap<>();\n    int index = 0;\n    \n    private void generateMap(int[] inorder){\n        for(int i=0;i<inorder.length;i++){\n            map.put(inorder[i],i);\n        }\n        index=inorder.length-1;\n    }\n    private TreeNode solve(int[] inorder, int[] postorder,int start,int end){\n        if(start>end || index<0){\n            return null;\n        }\n        \n        int e=postorder[index--];\n        TreeNode ans = new TreeNode(e);\n        int pos = map.get(e);\n        \n        ans.right = solve(inorder,postorder,pos+1,end);\n        ans.left = solve(inorder,postorder,start,pos-1);\n        \n        return ans;\n    }\n    \n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        generateMap(inorder);\n        TreeNode ans = solve(inorder,postorder,0,postorder.length-1);\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false}