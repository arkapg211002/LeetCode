{"id":797978856,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1662992995,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/797978856/","is_pending":"Not Pending","title":"Design HashMap","memory":"69.8 MB","code":"class MyHashMap {\n    class HMNode{\n        int key;\n        int value;\n        HMNode(int key,int value){\n            this.key = key;\n            this.value = value;\n        }\n    }\n    int size;\n    LinkedList<HMNode> []buckets;\n    \n    public void initBuckets(int n){\n        buckets = new LinkedList[n];\n        for(int i=0;i<buckets.length;i++){\n            buckets[i] = new LinkedList<>();\n        }\n    }\n    public int size(){\n        return size;\n    }\n    public int hashFunc(int key){\n        int hashcode = Integer.hashCode(key);\n        return Math.abs(hashcode) % buckets.length; \n    }\n    public int getIndexWithBucket(int key,int i){\n        int di = 0;\n        for(HMNode node : buckets[i]){\n            if(node.key == key){\n                return di;\n            }\n            di++;\n        }\n        return -1;\n    }\n    public void reHash(){\n        LinkedList<HMNode> []oarr = buckets;\n        initBuckets(oarr.length * 2);\n        size = 0;\n        \n        for(int i=0;i<oarr.length;i++){\n            for(HMNode node : oarr[i]){\n                put(node.key,node.value);\n            }\n        }\n    }\n    \n    \n    \n    public MyHashMap() {\n        initBuckets(4);\n        size = 0;\n    }\n    \n    public void put(int key, int value) {\n        int bi = hashFunc(key);\n        int di = getIndexWithBucket(key,bi);\n        \n        if(di != -1){\n            HMNode node = buckets[bi].get(di);\n            node.value = value;\n        }else{\n            HMNode node = new HMNode(key,value);\n            buckets[bi].add(node);\n            size++;\n        }\n        \n        double lambda = size * 1.0 /buckets.length;\n        if(lambda > 2.0){\n            reHash();\n        }\n    }\n    \n    public int get(int key) {\n        int bi = hashFunc(key);\n        int di = getIndexWithBucket(key,bi);\n        \n        if(di != -1){\n            HMNode node = buckets[bi].get(di);\n            return node.value;\n        }else{\n            return -1;\n        }\n    }\n    \n    public void remove(int key) {\n        int bi = hashFunc(key);\n        int di = getIndexWithBucket(key,bi);\n        \n        if(di != -1){\n            HMNode node = buckets[bi].remove(di);\n            size--;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"design-hashmap","has_notes":false}