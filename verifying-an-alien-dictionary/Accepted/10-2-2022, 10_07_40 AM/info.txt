{"id":813246682,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1664685460,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/813246682/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"42.1 MB","code":"class Solution {\n    Map<Character, Integer> map;\n    public boolean isAlienSorted(String[] words, String order) {\n        map = new HashMap<>();\n        for (int i = 0; i < order.length(); i++) {\n            map.put(order.charAt(i), i);\n        }\n        for (int i = 0; i < words.length - 1; i++) {\n            if (!compare(words[i], words[i + 1])) return false;\n        }\n        return true;\n    }\n    \n    private boolean compare(String s1, String s2) {\n        int l1 = s1.length(), l2 = s2.length();\n        for (int i = 0, j = 0; i < l1 && j < l2; i++, j++) {\n            if (s1.charAt(i) != s2.charAt(j)) {\n                if (map.get(s1.charAt(i)) > map.get(s2.charAt(j))) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n        }\n        if (l1 > l2) return false;\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary","has_notes":false}