{"id":912193936,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678380718,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/912193936/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal II","memory":"42.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        collect(root, list, 0);\n        Collections.reverse(list);\n        return list;\n    }\n    void collect(TreeNode root, List<List<Integer>> list, int height){\n        if(root == null)    return;\n        if(height >= list.size())    list.add(new ArrayList<>());\n        list.get(height).add(root.val);\n        collect(root.left,list,height+1);\n        collect(root.right,list,height+1);\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal-ii","has_notes":false}