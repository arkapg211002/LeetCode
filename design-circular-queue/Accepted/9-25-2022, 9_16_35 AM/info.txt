{"id":807987840,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1664077595,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/807987840/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"48.1 MB","code":"class MyCircularQueue {\n    private int tail, head, size, n;\n    private final int[] a;\n    public MyCircularQueue(int k) {\n        a = new int[n = k];\n        tail = -1;\n    }\n    \n    public boolean enQueue(int x) {\n        if (size == n) return false;\n        a[tail = ++tail % n] = x;\n        size++;\n        return true;\n    }\n    \n    public boolean deQueue() {\n        if (size == 0) return false;\n        head = ++head % n;\n        size--;\n        return true;\n    }\n    \n    public int Front() {\n        return size == 0 ? -1 : a[head];\n    }\n    \n    public int Rear() {\n        return size == 0 ? -1 : a[tail];\n    }\n    \n    public boolean isEmpty() {\n        return size == 0;\n    }\n    \n    public boolean isFull() {\n        return size == n;\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * boolean param_1 = obj.enQueue(value);\n * boolean param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * boolean param_5 = obj.isEmpty();\n * boolean param_6 = obj.isFull();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false}