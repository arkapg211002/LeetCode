{"id":912752079,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678463338,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/912752079/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"42.8 MB","code":"class Solution {\n     // Creating three global pointers\n    TreeNode previous = null;\n    TreeNode first = null;\n    TreeNode second = null;\n    \n    public void recoverTree(TreeNode root) {\n        // Finding the two swapped nodes\n        solve(root);\n        \n        //Swaping the value of nodes\n        int temp = first.val;\n        first.val = second.val;\n        second.val = temp;\n    }\n     //New Function to find the two nodes\n    public void solve(TreeNode root){\n        \n        if(root == null){\n            return;\n        }\n        \n        //Doing inorder traversal i.e, sarting from left then right\n        solve(root.left);\n        \n        // If current node is smaller than previous, then previous node is invalid\n        if(previous != null && root.val < previous.val){\n            \n            //Storing previous node\n            if(first == null){\n                first = previous;\n            }\n            \n            //If both nodes are adjacent, save the current node in that case\n            second = root;\n            \n        }\n        \n        //Making current node as previous node\n        previous = root;\n        \n        //Moving to right sub-tree\n        solve(root.right);\n        \n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false}