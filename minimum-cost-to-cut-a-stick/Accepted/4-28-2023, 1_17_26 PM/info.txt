{"id":940993153,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1682668046,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/940993153/","is_pending":"Not Pending","title":"Minimum Cost to Cut a Stick","memory":"42.3 MB","code":"class Solution {\n    public int minCost(int n, int[] cuts) {\n        List<Integer>ct=new ArrayList<>();\n        for(int i=0;i<cuts.length;i++)ct.add(cuts[i]);\n        int c=ct.size();\n        return cost(n,c,ct);\n    }\n    public int f(int i, int j, List<Integer>cuts, int dp[][])\n    {\n        if(i>j) return 0;\n        if(dp[i][j]!=-1)\n            return dp[i][j];\n        int mini = Integer.MAX_VALUE;\n        for(int ind=i; ind<=j; ind++)\n        {\n            int ans = cuts.get(j+1) - cuts.get(i-1) + f(i,ind-1,cuts,dp) + f(ind+1,j,cuts,dp);\n            mini = (int)Math.min(mini, ans);\n        }\n        return dp[i][j] = mini;\n    }\n    public int cost(int n, int c, List<Integer>cuts)\n    {\n        cuts.add(n);\n        cuts.add(0,0);\n        Collections.sort(cuts);\n        int dp[][]=new int[c+1][c+1];\n        for(int r[]:dp)Arrays.fill(r,-1);\n        return f(1,c,cuts,dp);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-cut-a-stick","has_notes":false}