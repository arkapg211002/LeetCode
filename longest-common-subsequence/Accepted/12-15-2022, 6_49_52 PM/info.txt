{"id":860182021,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1671110392,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/860182021/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"46.3 MB","code":"class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        if (null == text1 || null == text2 || text1.isEmpty() || text2.isEmpty()) {\n            return 0;\n        }\n        \n        int[][] dp = new int[text2.length() + 1][];\n        for (int i = 0; i <= text2.length(); i++) {\n            dp[i] = new int[text1.length() + 1];\n        }\n        \n        for (int i = 1; i < dp.length; i++) {\n            for (int j = 1; j < dp[0].length; j++) {\n                if (text1.charAt(j - 1) == text2.charAt(i - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        return dp[dp.length - 1][dp[0].length - 1];\n    }\n}\n\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"longest-common-subsequence","has_notes":false}