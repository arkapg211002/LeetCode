{"id":936657156,"lang":"java","lang_name":"Java","time":"2 weeks, 4 days","timestamp":1681955942,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/936657156/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"41.9 MB","code":"class Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n     LinkedList<pair> q= new LinkedList <>();\n        int max=Integer.MIN_VALUE;\n        if(root==null)\n            return 0; // why not null coz see eg 1 when 2 L will come with null we cant add anything to it \n        q.addLast(new pair(root , 0));\n        \n        while(!q.isEmpty())\n        {\n             int size=q.size();\n        \n             max = Math.max(max, (q.getLast().level - q.getFirst().level + 1));\n\n            for(int i=0;i<size;i++)\n            {\n                pair ele=q.removeFirst();\n                if(ele.root.left!=null)\n                {\n                    q.addLast(new pair(ele.root.left,2*ele.level));\n                }\n                if(ele.root.right!=null)\n                {\n                     q.addLast(new pair(ele.root.right,2*ele.level+1));\n                }\n            }\n        }\n        return max;\n    }\n    \n\n    // making a custom pair class to get the root and level\n    static class pair\n    {\n        int level;\n        TreeNode root;\n    \n    public pair ( TreeNode root,int level)\n    {\n        this.level=level;\n        this.root =root ;\n    }\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false}