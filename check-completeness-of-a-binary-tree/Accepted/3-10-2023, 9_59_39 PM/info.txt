{"id":912773545,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678465779,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/912773545/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"42.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        Queue<TreeNode>q=new LinkedList<>();\n        q.add(root);\n        while(q.isEmpty()==false)\n        {\n            TreeNode p=q.poll();\n            if(p==null && q.peek()!=null)return false;\n            if(p!=null)\n            {\n                q.add(p.left);\n                q.add(p.right);\n            }\n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}