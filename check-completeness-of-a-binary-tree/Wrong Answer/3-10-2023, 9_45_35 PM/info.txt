{"id":912766216,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678464935,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/912766216/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    boolean res=true;\n    LinkedList<TreeNode>q=new LinkedList<>();\n    List<Integer>b=new ArrayList<>();\n    int h=0;\n    public boolean isCompleteTree(TreeNode root) {\n        h=height(root);\n        traverse(root);\n        return res;\n    }\n    public int height(TreeNode root)\n    {\n        if(root==null)return 0;\n        int lh=height(root.left);\n        int rh=height(root.right);\n        return (int)Math.max(lh,rh)+1;\n    }\n    public void traverse(TreeNode root)\n    {\n        TreeNode p=root;\n        if(p==null)return;\n        q.add(p);\n        int level=1;\n        outer:\n        while(q.isEmpty()==false)\n        {\n            int n=q.size();\n            for(int i=0;i<n;i++)\n            {\n                p=q.removeFirst();\n                b.add(p.val);\n                if(p.left!=null)q.add(p.left);\n                if(p.right!=null)q.add(p.right);\n                if(level==h-1 && p.left==null && p.right!=null)\n                {\n                    res=false;\n                    break outer;\n                }\n                if(i<n-1 && p.left!=null && p.right==null)\n                {\n                    res=false;\n                    break outer;\n                }\n            }\n            if(level<h && b.size()!=(int)Math.pow(2,level-1))res=false;\n            if(level==h && b.size()==1)res=false;\n            if(level==h && b.size()==(int)Math.pow(2,level-1))res=false;\n            level+=1;\n            b=new ArrayList<>();\n            \n        }\n    }\n}","compare_result":"110010011111101111011011101010111111111001111111111111110010111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}