{"id":941206841,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1682703020,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/941206841/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"54.8 MB","code":"class Solution {\n    public static int largestRectangleArea(int[] height) {\n    if (height == null || height.length == 0) {\n        return 0;\n    }\n    int[] lessFromLeft = new int[height.length]; // idx of the first bar the left that is lower than current\n    int[] lessFromRight = new int[height.length]; // idx of the first bar the right that is lower than current\n    lessFromRight[height.length - 1] = height.length;\n    lessFromLeft[0] = -1;\n\n    for (int i = 1; i < height.length; i++) {\n        int p = i - 1;\n\n        while (p >= 0 && height[p] >= height[i]) {\n            p = lessFromLeft[p];\n        }\n        lessFromLeft[i] = p;\n    }\n\n    for (int i = height.length - 2; i >= 0; i--) {\n        int p = i + 1;\n\n        while (p < height.length && height[p] >= height[i]) {\n            p = lessFromRight[p];\n        }\n        lessFromRight[i] = p;\n    }\n\n    int maxArea = 0;\n    for (int i = 0; i < height.length; i++) {\n        maxArea = Math.max(maxArea, height[i] * (lessFromRight[i] - lessFromLeft[i] - 1));\n    }\n\n    return maxArea;\n}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false}