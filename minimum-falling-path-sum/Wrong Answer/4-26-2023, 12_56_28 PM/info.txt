{"id":939931731,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1682493988,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/939931731/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"N/A","code":"class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        int n = matrix.length;\n        int m = matrix[0].length;\n        int dp[][] = new int[n][m];\n        for(int i=0; i<m; i++)\n            dp[0][i] = matrix[0][i];\n        for(int i=1; i<n; i++)\n        {\n            for(int j=0;j<m;j++)\n            {\n                int up = matrix[i][j] + dp[i-1][j];\n                int ld= matrix[i][j];\n                if(j-1>=0) ld += dp[i-1][j-1];\n                else ld += 101;\n                int rd = matrix[i][j];\n                if(j+1<m) rd += dp[i-1][j+1];\n                else rd += 101;\n                dp[i][j] = Math.min(up, Math.min(ld,rd));\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for(int j=0; j<m;j++)\n            ans = Math.min(ans,dp[n-1][j]);    \n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111110","title_slug":"minimum-falling-path-sum","has_notes":false}