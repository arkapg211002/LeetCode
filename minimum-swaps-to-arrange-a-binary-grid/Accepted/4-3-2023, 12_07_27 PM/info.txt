{"id":927041423,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1680503847,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/927041423/","is_pending":"Not Pending","title":"Minimum Swaps to Arrange a Binary Grid","memory":"45.6 MB","code":"class Solution {\n    // O(N^2)time\n// O(N)space\npublic int minSwaps(int[][] grid) {\n    //use linkedlist to save the continuous zero count from right to left\n    LinkedList<Integer> list = new LinkedList<>();\n    int r = grid.length, c = grid[0].length;\n    for (int i = 0; i < r; i++) {\n        int count = 0;\n        for (int j = c - 1; j >= 0; j--) {\n            if (grid[i][j] != 0) break;\n            count++;\n        }\n        list.add(count);\n    }\n    int res = 0;\n    for (int i = 0; i < r; i++) {\n        int t = -1;\n        //find the first zero count which is >= (r - 1 - i)\n        //the index is the step\n        for (int j = 0; j < list.size(); j++) {\n            if (list.get(j) >= (r - 1 - i)) {\n                t = list.remove(j);\n                res += j;\n                break;\n            }\n        }\n        if (t == -1) return -1;\n    }\n    return res;\n}\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-swaps-to-arrange-a-binary-grid","has_notes":false}