{"id":857878978,"lang":"java","lang_name":"Java","time":"4 months, 4 weeks","timestamp":1670727500,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/857878978/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"43.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n        int maxSum = Integer.MIN_VALUE;\n        public int maxPathSum(TreeNode root) {\n            oneSideMaxSum(root);\n            return maxSum;\n        }\n\n        // preserve the max sum of one side of node \"root\",\n        // includig \"root\" node\n        private int oneSideMaxSum(TreeNode root) {\n            if (root == null) {\n                return 0;\n            }\n            int l = oneSideMaxSum(root.left);\n            int r = oneSideMaxSum(root.right);\n            maxSum = Math.max(maxSum, root.val + Math.max(l, 0) + Math.max(r, 0));\n            return root.val + Math.max(0, Math.max(l, r));\n        }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false}