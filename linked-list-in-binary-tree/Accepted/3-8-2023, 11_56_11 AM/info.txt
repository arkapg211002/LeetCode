{"id":911297451,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678256771,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/911297451/","is_pending":"Not Pending","title":"Linked List in Binary Tree","memory":"42.2 MB","code":"class Solution {\n    \n    public boolean isSamePath(ListNode head, TreeNode root){\n        \n        if(head==null) return true;//linked list all nodes present in tree, return tree\n        if(root==null)  return false; // linked list is still remaning but root is at null, return false\n\n        if(root.val == head.val){//if root and head values are same then check if root left or root right tree downwpath is same as head.next linked list\n            if(isSamePath(head.next,root.left)) return true;// if linked list is present in left side of root node then return true no need to check else where\n            \n            if(isSamePath(head.next,root.right)) return true;// if linked list is present in not present in left side then check right side of root node then return true if linkedlist is present\n        }\n\n        return false;// if linked list was found alredy then it was return before meeting this line, and if recursion is approching here that means no linked List found at this path, return false\n        \n    }\n    public boolean isSubPath(ListNode head, TreeNode root) {\n        \n        if(head==null) return true;//linked list all nodes present in tree, return tree\n        if(root==null)  return false; // linked list is still remaning but root is at null, return false\n        \n\n        if(root.val==head.val){\n            if(isSamePath(head,root)) return true;//if linked list is present in subtree of root node then return true no need to check elsewhere\n        }\n        // if root.val is not equal to head.val then we check for the linked list in ledt sub tree and right sub tree OR if root.val was equal to head.val but somehow\n        // remaning linkedlist is not similar to the downward path of the the root node then also we try to check in left and right subtree\n        \n        if(isSubPath(head,root.left)) return true;// if linked list is present in left side of root node then return true no need to check else where       \n        \n        if(isSubPath(head,root.right)) return true;// if linked list is present in not present in left side then check right side of root node then return true if linkedlist is present\n        \n        \n        return false;// if linked list was found alredy then it was return before meeting this line, and if recursion is approching here that means no linked List found at this path, retun false\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"linked-list-in-binary-tree","has_notes":false}