{"id":916783830,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046013,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/916783830/","is_pending":"Not Pending","title":"Permutations","memory":"43.3 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        boolean [] visited = new boolean[nums.length];\n        FindAllPermutation(res,nums, new ArrayList(),visited);\n        return res;\n    }\n    void FindAllPermutation(List<List<Integer>> res, int[] nums, List<Integer> curr, boolean [] visited){\n        if(curr.size()==nums.length){\n            res.add(new ArrayList(curr));\n            return;\n        }\n\n        for(int i =0;i<nums.length;i++){\n            if(visited[i]==true)\n            continue;\n            curr.add(nums[i]);\n            visited[i]= true;\n            FindAllPermutation(res,nums,curr,visited);\n            curr.remove(curr.size()-1);\n            visited[i]=false;\n        }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false}