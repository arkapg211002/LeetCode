{"id":911295150,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678256494,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/911295150/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic TreeNode createBinaryTree(int[][] descriptions) {\n    HashMap<Integer, TreeNode> x = new HashMap<>();\n    HashSet<TreeNode> par = new HashSet<>();\n    for(int [] arr : descriptions){\n        if(!x.containsKey(arr[0])){\n            x.put(arr[0], new TreeNode(arr[0]));\n            par.add(x.get(arr[0]));\n        }\n        TreeNode curr = x.get(arr[0]);\n\t\t\n        if(!x.containsKey(arr[1]))\n            x.put(arr[1], new TreeNode(arr[1]));\n        else par.remove(x.get(arr[1]));\n\t\t\n        TreeNode add = x.get(arr[1]);\n        if(arr[2]==1) curr.left = add;\n        else curr.right = add;\n    }\n    return par.iterator().next();\n}","compare_result":null,"title_slug":"create-binary-tree-from-descriptions","has_notes":false}