{"id":916787258,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046462,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/916787258/","is_pending":"Not Pending","title":"Merge Intervals","memory":"47.6 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n         List<int[]> res = new ArrayList<>();\n\n        if(intervals.length == 0 || intervals == null){\n        return res.toArray(new int[0][]);\n        }\n        Arrays.sort(intervals,(a,b)-> a[0]-b[0]);\n        int start = intervals[0][0];\n        int end = intervals[0][1];\n        for(int[] i : intervals){\n            if(i[0] <= end){\n                end = Math.max(end,i[1]);\n            }else{\n                res.add(new int[]{start,end});\n                start = i[0];\n                end = i[1];\n            }\n        }\n        res.add(new int[]{start,end});\n        return res.toArray(new int[0][]);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}