{"id":911368018,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678266444,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/911368018/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"46.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxLevelSum(TreeNode root) {\n        if (root == null) return 0;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        \n        int level = 0;\n        int minLevel = 0, maxSum = Integer.MIN_VALUE;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            level++;\n            int levelSum = 0;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                levelSum += node.val;\n                if (node.left != null) queue.add(node.left);\n                if (node.right != null) queue.add(node.right);\n            }\n            if (levelSum > maxSum) {\n                maxSum = levelSum;\n                minLevel = level;\n            }\n        }\n        return minLevel;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false}