{"id":940932562,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682658034,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/940932562/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"42.9 MB","code":"class Solution {\n    public List<Integer> largestDivisibleSubset(int[] nums) {\n        int n=nums.length;\n        int dp[]=new int[n];\n        Arrays.fill(dp,1);\n        int hash[]=new int[n];\n        Arrays.fill(hash,1);\n        Arrays.sort(nums);\n        for(int i=0;i<n;i++)\n        {\n            hash[i]=i;\n            for(int prev=0;prev<=i-1;prev++)\n            {\n                if(nums[i]%nums[prev]==0 && dp[prev]+1>dp[i])\n                {\n                    dp[i]=dp[prev]+1;\n                    hash[i]=prev;\n                }\n            }\n        }\n        int ans=-1,last=-1;\n        for(int i=0;i<n;i++)\n        {\n            if(dp[i]>ans)\n            {\n                ans=dp[i];\n                last=i;\n            }\n        }\n        List<Integer>l=new ArrayList<>();\n        l.add(nums[last]);\n        while(hash[last] != last)\n        {\n            last= hash[last];\n            l.add(nums[last]);\n        }\n        Collections.reverse(l);\n        return l;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false}