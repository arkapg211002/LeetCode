{"id":789813715,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1662140855,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/789813715/","is_pending":"Not Pending","title":"Lucky Numbers in a Matrix","memory":"50.7 MB","code":"class Solution {\npublic List luckyNumbers (int[][] matrix) {\n\n     List<Integer> result = new ArrayList<Integer>();\n//rows[] and col[] arrays are used to save row_min and col_max values\nint rows[] = new int[matrix.length];\nint columns[] = new int[matrix[0].length];\n\n//to find row_min values and adding into row[]\nfor (int i = 0; i < matrix.length; i++) {\n    int min = 999999999; \n    for (int j = 0; j < matrix[i].length; j++) {\n         min = Math.min(matrix[i][j], min);\n    }\n    rows[i] = min;\n}\n\n//To find col_max values and adding into col[]\n for(int i=0; i < matrix[0].length;i++){\n     int max = 0;\n    for (int j = 0; j < matrix.length; j++) {\n         max = Math.max(matrix[j][i], max);\n    }\n    columns[i] = max;\n}\n\n//to store result value because return type is arraylist\n \n //To compare arrays(row[] and col[]\nfor(int i=0;i<matrix.length;i++){\n    for(int j=0; j < matrix[0].length;j++){\n        if(rows[i]==columns[j]){\n          result.add(rows[i]);\n          }\n    }\n}\nreturn result;\n}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lucky-numbers-in-a-matrix","has_notes":false}