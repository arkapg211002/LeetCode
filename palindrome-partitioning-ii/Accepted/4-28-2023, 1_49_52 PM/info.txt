{"id":941003504,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1682669992,"status":10,"status_display":"Accepted","runtime":"1275 ms","url":"/submissions/detail/941003504/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"68.3 MB","code":"class Solution {\n    \n    int[][] dp;\n    \n    public int minCut(String s) \n    {\n        dp = new int[s.length()][s.length()];\n        \n        for(int i[]: dp)\n            Arrays.fill(i , -1);\n\n        return solve(s , 0 , s.length()-1);\n    }\n    \n    private int solve(String s , int i , int j)\n    {\n        int left,right;\n        if(i>=j)\n            return 0;\n        \n        if(is_palindrome(s , i , j) == true)\n            return 0;\n        \n        if(dp[i][j] != -1)\n            return dp[i][j];\n        \n        dp[i][j] = Integer.MAX_VALUE;\n        \n        for(int k=i; k<j ; k++)\n        {\n            if(is_palindrome(s , i , k ) == true)\n            {\n                int count = Math.min(dp[i][j] , solve(s , i , k) + solve(s, k+1 , j) +1);\n                \n                dp[i][j] = count;\n            }\n        }\n        return dp[i][j];\n        \n        \n    }\n    \n    private boolean is_palindrome(String s , int low , int high)\n    {\n        while(low < high)\n        {\n            if(s.charAt(low++) != s.charAt(high--))\n                return false;\n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"palindrome-partitioning-ii","has_notes":false}