{"id":911208329,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678244791,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/911208329/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"40.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode root=null;\n    public TreeNode bstFromPreorder(int[] preorder) {\n        for(int i=0;i<preorder.length;i++)\n        {\n            root=insert(root,preorder[i]);\n        }\n        return root;\n    }\n    public TreeNode insert(TreeNode p,int k)\n    {\n        if(p==null)\n        {\n            p=new TreeNode(k);\n            p.left=null;\n            p.right=null;\n        }\n        else if(k<p.val) p.left=insert(p.left,k);\n        else p.right=insert(p.right,k);\n        return p;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false}