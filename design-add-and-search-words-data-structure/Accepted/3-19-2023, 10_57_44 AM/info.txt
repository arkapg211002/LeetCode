{"id":917914785,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1679203664,"status":10,"status_display":"Accepted","runtime":"2448 ms","url":"/submissions/detail/917914785/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"51.3 MB","code":"class WordDictionary {\n    Map<Integer, List<String>> map = new HashMap<>();\npublic void addWord(String word) {\n    int index = word.length();\n\tif (!map.containsKey(index)) {\n\t    List<String> list = new ArrayList<>();\n\t    list.add(word);\n\t\tmap.put(index, list);\n\t} else {\n\t\tmap.get(index).add(word);\n\t}\n}\n\n\npublic boolean search(String word) {\n  int index = word.length();\n  if (!map.containsKey(index)) {\n      return false;\n  }\n  \n  List<String> list = map.get(index);\n  for(String s : list) { \n      if(isSame(s, word)) { // when word has '.'\n          return true;\n      }\n  }\n  return false;\n}\n\npublic boolean isSame(String s, String word) { // word has '.'\n    for (int i = 0; i < s.length(); i++) {\n        if (word.charAt(i) != '.' && s.charAt(i) != word.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false}