{"id":916788314,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046592,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/916788314/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"45.2 MB","code":"class Solution {\n    public int f(int i , int j , int[][] grid,int n , int m , int[][] dp) {\n        if(i == n-1 && j == m-1) return grid[i][j]; \n        if(i == n || j== m) return (int)1e9;\n        if(dp[i][j] != -1) return dp[i][j];\n        int right = grid[i][j] + f(i,j+1,grid,n,m,dp);\n        int down = grid[i][j] + f(i+1,j,grid,n,m,dp);\n        return dp[i][j] = Math.min(right,down);\n\n    }\n    public int minPathSum(int[][] grid) {\n        int n = grid.length,m = grid[0].length;\n        int[][] dp = new int[n][m];\n        for(int[] d : dp) Arrays.fill(d,-1);\n        return f(0,0,grid,n,m,dp);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false}