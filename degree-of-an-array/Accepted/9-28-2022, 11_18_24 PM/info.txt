{"id":810758974,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1664387304,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/810758974/","is_pending":"Not Pending","title":"Degree of an Array","memory":"54.2 MB","code":"class Solution {\n    public int findShortestSubArray(int[] nums) {\n        HashMap<Integer,Integer> freqMap = new HashMap<>();\n        HashMap<Integer,Integer> seenMap = new HashMap<>();\n        int degree=0;\n        int minLength=0;\n        for(int i=0;i<nums.length;i++){\n            seenMap.putIfAbsent(nums[i],i);// this will store the index of first seen occurence\n            freqMap.put(nums[i],freqMap.getOrDefault(nums[i],0)+1);\n            if(degree<freqMap.get(nums[i])){\n                degree=freqMap.get(nums[i]);\n                minLength= i-seenMap.get(nums[i])+1;\n            }\n            else if(degree==freqMap.get(nums[i])){\n                minLength= Math.min(minLength,i-seenMap.get(nums[i])+1);\n            }\n        }\n        return minLength;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array","has_notes":false}