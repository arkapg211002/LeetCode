{"id":841692693,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1668219693,"status":10,"status_display":"Accepted","runtime":"113 ms","url":"/submissions/detail/841692693/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"71.2 MB","code":"class MedianFinder {\n        PriorityQueue<Integer> min ;\n        PriorityQueue<Integer> max ;\n    public MedianFinder() {\n        max = new PriorityQueue<>(Collections.reverseOrder());\n        min = new PriorityQueue<>();\n    }\n    \n    public void addNum(int num) {\n        if(max.isEmpty() || max.peek() >= num){\n            max.add(num);\n        }\n        else{\n            min.add(num);\n        }\n        if(max.size() > min.size()+1){\n            min.add(max.poll());\n        }\n        else if(max.size() < min.size()){\n            max.add(min.poll());\n        }\n    }\n    \n    public double findMedian() {\n        if(max.size() == min.size()){\n            return (max.peek()/2.0) + (min.peek()/2.0);\n        }\n        else return max.peek();\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false}