{"id":940646533,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682607609,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940646533/","is_pending":"Not Pending","title":"Minimum Cost to Split an Array","memory":"N/A","code":"class Solution {\n    public int minCost(int[] nums, int k) {\n        int n= nums.length;\n        int dp[]=new int[n];\n        Arrays.fill(dp,-1);\n        int len[][] = new int[n][n];\n        for(int r[]:len)Arrays.fill(r,0);\n        for(int i=0;i<n;i++)\n        {\n            int count[]=new int[n];\n            Arrays.fill(count,0);\n            int c=0;\n            for(int j=i;j<n;j++)\n            {\n                count[nums[j]]+=1;\n                if(count[nums[j]]==2)c+=2;\n                else if(count[nums[j]]>2)c+=1;\n                len[i][j]=c;\n            }\n        }\n        return f(0,nums,k,len,dp);\n    }\n    public int f(int ind,int nums[],int k,int len[][],int dp[])\n    {\n        if(ind >= nums.length)return 0;\n        if(dp[ind]!=-1)return dp[ind];\n        dp[ind]=(int)Math.pow(10,9);\n        for(int i=ind;i<nums.length;i++)\n        {\n            int current = len[ind][i]+k;\n            int next = f(i+1,nums,k,len,dp);\n            dp[ind]=(int)Math.min(dp[ind],current+next);\n        }\n        return dp[ind];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111000001111","title_slug":"minimum-cost-to-split-an-array","has_notes":false}