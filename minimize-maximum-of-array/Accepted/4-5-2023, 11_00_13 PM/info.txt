{"id":928599177,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1680715813,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/928599177/","is_pending":"Not Pending","title":"Minimize Maximum of Array","memory":"61.2 MB","code":"class Solution {\n    public boolean check(int[] nums, int k) {\n        // variable to keep track of how many moves we have\n        long have = 0;\n        // iterate over the array\n        for (int n : nums) {\n            // if the number is less than or equal to k, we don't need to do anything\n            if (n <= k) {\n                // add the number of moves needed to make it k to the total number of moves we have\n                have += k - n;\n            } else {\n                // if the number is greater than k, we need to move some of its value to the previous element\n                // check if we have enough moves left to make this move\n                if (have < n - k)\n                    return false;\n                else\n                    // if we have enough moves, subtract the number of moves needed to make this move from the total number of moves we have\n                    have -= (n - k);\n            }\n        }\n        // if we reach here, it means we were able to achieve a maximum value of k or less using the given number of moves\n        return true;\n    }\n\n    public int minimizeArrayValue(int[] nums) {\n        // initialize left and right pointers for binary search\n        int left = 0, right = Arrays.stream(nums).max().getAsInt();\n        // perform binary search to find the minimum possible value of the maximum integer of nums after performing any number of operations\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (check(nums, mid))\n                right = mid;\n            else\n                left = mid + 1;\n        }\n        // return the minimum possible value of the maximum integer of nums after performing any number of operations\n        return left;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-maximum-of-array","has_notes":false}