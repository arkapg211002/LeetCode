{"id":882811307,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1674357520,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/882811307/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"135.7 MB","code":"class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>>resultList = new ArrayList();\n        backTrack(resultList, new ArrayList(), 0, s);\n        return resultList;\n    }\n\n    private void backTrack(List<List<String>> resultList, List<String> currentList, int index, String s ){\n        if(s.length()==index){\n            resultList.add(new ArrayList(currentList));\n        }else{\n            for(int i= index+1; i<=s.length(); i++){\n                String currentString = s.substring(index, i);\n                if(isValidPlaindrome(currentString)){\n                    currentList.add(currentString);\n                    backTrack(resultList,currentList,i,s);\n                    currentList.remove(currentList.size()-1);\n                }\n            }\n        }\n    }\n\n    private boolean isValidPlaindrome(String s){\n        int start=0;\n        int end=s.length()-1;\n        while(start<end){\n            if(s.charAt(start) != s.charAt(end)) \n              return false;\n             start++;\n             end--;\n            }\n          return true;\n        } \n\n}","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false}