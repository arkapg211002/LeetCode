{"id":802009698,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1663422671,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/802009698/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"N/A","code":"public class Solution {\npublic List<List<Integer>> palindromePairs(String[] words) {\n    List<List<Integer>> res = new ArrayList<List<Integer>>();\n    if(words == null || words.length == 0){\n        return res;\n    }\n    //build the map save the key-val pairs: String - idx\n    HashMap<String, Integer> map = new HashMap<>();\n    for(int i = 0; i < words.length; i++){\n        map.put(words[i], i);\n    }\n    \n    //special cases: \"\" can be combine with any palindrome string\n    if(map.containsKey(\"\")){\n        int blankIdx = map.get(\"\");\n        for(int i = 0; i < words.length; i++){\n            if(isPalindrome(words[i])){\n                if(i == blankIdx) continue;\n                res.add(Arrays.asList(blankIdx, i));\n                res.add(Arrays.asList(i, blankIdx));\n            }\n        }\n    }\n    \n    //find all string and reverse string pairs\n    for(int i = 0; i < words.length; i++){\n        String cur_r = reverseStr(words[i]);\n        if(map.containsKey(cur_r)){\n            int found = map.get(cur_r);\n            if(found == i) continue;\n            res.add(Arrays.asList(i, found));\n        }\n    }\n    \n    //find the pair s1, s2 that \n    //case1 : s1[0:cut] is palindrome and s1[cut+1:] = reverse(s2) => (s2, s1)\n    //case2 : s1[cut+1:] is palindrome and s1[0:cut] = reverse(s2) => (s1, s2)\n    for(int i = 0; i < words.length; i++){\n        String cur = words[i];\n        for(int cut = 1; cut < cur.length(); cut++){\n            if(isPalindrome(cur.substring(0, cut))){\n                String cut_r = reverseStr(cur.substring(cut));\n                if(map.containsKey(cut_r)){\n                    int found = map.get(cut_r);\n                    if(found == i) continue;\n                    res.add(Arrays.asList(found, i));\n                }\n            }\n            if(isPalindrome(cur.substring(cut))){\n                String cut_r = reverseStr(cur.substring(0, cut));\n                if(map.containsKey(cut_r)){\n                    int found = map.get(cut_r);\n                    if(found == i) continue;\n                    res.add(Arrays.asList(i, found));\n                }\n            }\n        }\n    }\n    \n    return res;\n}\n\npublic String reverseStr(String str){\n    StringBuilder sb= new StringBuilder(str);\n    return sb.reverse().toString();\n}\n\npublic boolean isPalindrome(String s){\n    int i = 0;\n    int j = s.length() - 1;\n    while(i <= j){\n        if(s.charAt(i) != s.charAt(j)){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false}