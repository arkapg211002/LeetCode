{"id":880339400,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1674018624,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/880339400/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"47.7 MB","code":"class Solution {\n    public int maxSubarraySumCircular(int[] array) {\n        // variable to keep track of the total sum of the array\n        int acc = 0;\n        // variable to keep track of the maximum sum subarray using kadane's algorithm\n        int max1 = kadane(array);\n        // iterate through the array and negate each element\n        for(int i = 0; i < array.length; i++) {\n            acc += array[i];\n            array[i] = -array[i];\n        }\n        // variable to keep track of the minimum sum subarray using kadane's algorithm on the negated array\n        int min = kadane(array);\n        // variable to keep track of the maximum sum subarray that can be formed by wrapping around the array\n        int max2 = acc + min;\n        // if the maximum sum subarray that can be formed by wrapping around the array is zero, return the maximum sum subarray using kadane's algorithm\n        if(max2 == 0)  return max1;\n        // return the maximum of the two maximum sum subarrays\n        return Math.max(max1, max2);\n    }\n    // function to calculate the maximum sum subarray using kadane's algorithm\n      public int kadane(int[] array) {\n        // variable to keep track of the maximum sum subarray ending at current index\n        int maxSum = array[0];\n        // variable to keep track of the overall maximum sum subarray\n        int max = array[0];\n        // iterate through the array starting from the second element\n        for(int i = 1; i < array.length; i++) {\n            // update the maximum sum subarray ending at current index \n            // by taking the maximum between the current element and the sum of the current element and the maximum sum subarray ending at the previous index\n            maxSum = Math.max(maxSum+array[i], array[i]);\n            // update the overall maximum sum subarray by taking the maximum between the current maximum sum subarray ending at current index and the overall maximum sum subarray\n            max = Math.max(max, maxSum);\n        }\n        return max;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray","has_notes":false}