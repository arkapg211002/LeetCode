{"id":937290364,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1682060113,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/937290364/","is_pending":"Not Pending","title":"Profitable Schemes","memory":"51.4 MB","code":"class Solution {\n    public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {\n        int len = group.length, MOD = (int)1e9 + 7;\n        int[][][] dp = new int[len + 1][n + 1][minProfit + 1];\n        dp[0][0][0] = 1;\n        for (int i = 1; i <= len; i++) {\n            int members = group[i - 1], earn = profit[i - 1];\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= minProfit; k++) {\n                    if (j < members) {\n                        dp[i][j][k] = dp[i - 1][j][k];\n                    } else {\n                        dp[i][j][k] = (dp[i - 1][j][k] + dp[i - 1][j - members][Math.max(0, k - earn)]) % MOD;\n                    }\n                }\n            }\n        }\n        int sum = 0;\n        for (int j = 0; j <= n; j++) {\n            sum = (sum + dp[len][j][minProfit]) % MOD;\n        }\n        return sum;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"profitable-schemes","has_notes":false}