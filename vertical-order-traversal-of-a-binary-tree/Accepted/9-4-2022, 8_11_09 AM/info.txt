{"id":790913137,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1662259269,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/790913137/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"43.3 MB","code":"class Node implements Comparable<Node>{\n    int val;\n    int columnNo;\n    \n    public Node(){\n        \n    }\n    \n    public Node(int val, int columnNo){\n        this.val=val;\n        this.columnNo=columnNo;\n    }\n    \n    public int compareTo(Node node){\n        if(this.columnNo==node.columnNo)\n            return this.val-node.val;\n        else\n            return this.columnNo-node.columnNo;\n    }\n}\nclass Solution {\n    Map<Integer, List<Node>> map=new TreeMap<>();\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        \n        if(null==root)\n            return null;\n        \n        inorder(root, 0, 0);\n        List<List<Integer>> result=new ArrayList<>();\n        for(Map.Entry<Integer, List<Node>> record :map.entrySet()){\n            Collections.sort(record.getValue());\n            result.add(record.getValue().stream().map(x-> x.val).collect(Collectors.toList()));\n        }\n        \n        return result;\n        \n    }\n    \n    public void inorder(TreeNode root, int verticalOrder, int columnNo){\n        if(root!=null){\n            inorder(root.left, verticalOrder-1, columnNo+1);\n            \n            Node node=new Node(root.val, columnNo);\n            if(null!=map.get(verticalOrder)){\n                map.get(verticalOrder).add(node);\n                map.put(verticalOrder, map.get(verticalOrder));\n            }else{\n                List<Node> list=new LinkedList<>();\n                list.add(node);\n                map.put(verticalOrder, list);\n            }\n            \n            inorder(root.right, verticalOrder+1, columnNo+1);\n        }\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false}