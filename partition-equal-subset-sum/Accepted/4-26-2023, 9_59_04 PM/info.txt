{"id":940154781,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1682526544,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/940154781/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"45.5 MB","code":"/*class Solution {\n    public boolean canPartition(int[] nums) {\n        int s=Arrays.stream(nums).sum();\n        if(s%2!=0)return false;\n        int n=nums.length;\n        s=s/2;\n        int dp[][]=new int[n][s+1];\n        for(int i=0;i<n;i++)dp[i][0]=1;\n        if(nums[0]<=s)dp[0][nums[0]]=1;\n        for(int i=1;i<n;i++)\n        {\n            for(int j=1;j<=s;j++)\n            {\n                int nt=dp[i-1][j];\n                int t=0;\n                if(nums[i]<=s)\n                    t=dp[i-1][s-nums[i]];\n                dp[i][j]=nt | t;\n            }\n        }\n        return (dp[n-1][s]==1)?true:false;\n    }\n}*/\n\n\nclass Solution {\n    public boolean canPartition(int arr[]) {\n        int n=arr.length;\n        int totSum=Arrays.stream(arr).sum();\n        if (totSum%2==1) return false;\n        else\n        {\n            int k = totSum/2;\n            boolean dp[][]=new boolean[n][k+1];\n            for(int i=0; i<n; i++)dp[i][0] = true;\n            if(arr[0]<=k)dp[0][arr[0]] = true;\n            for(int ind = 1; ind<n; ind++)\n            {\n                for(int target= 1; target<=k; target++)\n                {\n                    boolean notTaken = dp[ind-1][target];\n                    boolean taken = false;\n                    if(arr[ind]<=target)taken = dp[ind-1][target-arr[ind]];\n                    dp[ind][target]= notTaken||taken;\n                }\n            }\n            return dp[n-1][k];\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false}