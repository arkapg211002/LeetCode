{"id":911338698,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678262103,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/911338698/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"42.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode lcaDeepestLeaves(TreeNode root) {\n        if(root==null)return null;\n        int lh=height(root.left);\n        int rh=height(root.right);\n        if(lh==rh)return root;\n        else if(lh>rh)return lcaDeepestLeaves(root.left);\n        else return lcaDeepestLeaves(root.right);\n    }\n    public int height(TreeNode root)\n    {\n        if(root==null)return 0;\n        return (int)Math.max(height(root.left),height(root.right))+1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves","has_notes":false}