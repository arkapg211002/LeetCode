{"id":912114136,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678371745,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/912114136/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"43.1 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode fast = head;\n        ListNode slow = head;\n        while(fast!=null && fast.next!=null){\n            fast = fast.next.next;\n            slow = slow.next;\n            if (fast == slow){\n                slow = head;\n                while(slow!=fast){\n                    fast = fast.next;\n                    slow = slow.next;\n                }\n                return slow;\n            }\n        }\n        return null;\n    }\n}","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}