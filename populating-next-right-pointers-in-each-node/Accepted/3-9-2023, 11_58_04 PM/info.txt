{"id":912250815,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678386484,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/912250815/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"42.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node connect(Node root) {\n        if (root == null) return null;\n        Queue<Node> queue = new LinkedList<>();\n        queue.offer(root);\n\n        while(!queue.isEmpty()) {\n            int size = queue.size();\n            for(int i = 0; i < size; i++) {\n                Node node = queue.poll();\n                if(i < size - 1) {\n                    node.next = queue.peek();\n                }\n                if(node.left != null) {\n                    queue.offer(node.left);\n                }\n                if(node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n        }\n        return root;\n\n    }\n    \n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false}