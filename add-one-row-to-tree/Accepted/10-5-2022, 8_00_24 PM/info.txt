{"id":815794630,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1664980224,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/815794630/","is_pending":"Not Pending","title":"Add One Row to Tree","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode addOneRow(TreeNode root, int val, int depth) {\n        if(depth==1){\n            TreeNode newRoot = new TreeNode(val);\n            newRoot.left = root;\n            return newRoot;\n        }\n        addOneUtil(root,val,depth);\n        return root;\n    }\n    public void addOneUtil(TreeNode root,int val,int depth){\n        if(root==null) return;\n        if(depth == 2){\n            TreeNode newLeft = new TreeNode(val);\n            TreeNode left = root.left;\n            root.left = newLeft;\n            newLeft.left = left;\n\t\t\t\n\t\t\tTreeNode newRight = new TreeNode(val);\n            TreeNode right = root.right;\n            root.right = newRight;\n            newRight.right = right;\n            return;\n        }\n        addOneUtil(root.left,val,depth-1);\n        addOneUtil(root.right,val,depth-1);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-one-row-to-tree","has_notes":false}