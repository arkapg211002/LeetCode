{"id":929438865,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1680847751,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/929438865/","is_pending":"Not Pending","title":"Number of Enclaves","memory":"55.4 MB","code":"class Solution {\n  public int numEnclaves(int[][] A) {\n    final int m = A.length;\n    final int n = A[0].length;\n\n    // Remove lands connected to edge\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (A[i][j] == 1)\n            dfs(A, i, j);\n\n    int ans = 0;\n\n    for (int[] row : A)\n      ans += Arrays.stream(row).sum();\n\n    return ans;\n  }\n\n  private void dfs(int[][] A, int i, int j) {\n    if (i < 0 || i == A.length || j < 0 || j == A[0].length)\n      return;\n    if (A[i][j] == 0)\n      return;\n\n    A[i][j] = 0;\n    dfs(A, i + 1, j);\n    dfs(A, i - 1, j);\n    dfs(A, i, j + 1);\n    dfs(A, i, j - 1);\n  }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-enclaves","has_notes":false}