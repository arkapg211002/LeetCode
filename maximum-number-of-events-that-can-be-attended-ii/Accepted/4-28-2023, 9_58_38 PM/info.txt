{"id":941178584,"lang":"java","lang_name":"Java","time":"1Â week, 2Â days","timestamp":1682699318,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/941178584/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended II","memory":"80.3 MB","code":"class Solution {\n    public int maxValue(int[][] events, int k) {\n        int max = 0; \n        if (k == 1) \n        {\n            for(int [] event : events) \n                max = Math.max(max, event[2]);\n            return max;\n        }\n        Arrays.sort(events, (a,b) -> Integer.compare(a[0], b[0]));\n        int size = events.length;\n        int[][] cache = new int[size + 1][k + 1];\n        for (int i = size - 1; i >= 0; i--) \n        {\n            int next = binarySearch(events, events[i][1], i + 1, size);\n            for (int j = 1; j <= k; j++) \n                cache[i][j] = Math.max(cache[i + 1][j],cache[next][j - 1] + events[i][2]); \n        }\n        return cache[0][k];\n    }\n    public int binarySearch(int[][] events, int targetEnd, int lo, int hi) \n    {\n        while (lo < hi) \n        {\n            int mid = (hi - lo) / 2 + lo;\n            if (targetEnd >= events[mid][0]) \n                lo = mid + 1;\n            else \n                hi = mid;\n        }\n        return lo;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended-ii","has_notes":false}