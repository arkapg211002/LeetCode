{"id":920290941,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1679509149,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/920290941/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"93.2 MB","code":"class Solution {\n    class Pair{\n        int dest;\n        int cost;\n        Pair(int dest, int cost){\n            this.dest = dest;\n            this.cost = cost;\n        }\n    }\n    public int minScore(int n, int[][] roads) {\n        \n        int m = roads.length;\n        Queue<Pair> que = new ArrayDeque<>();\n        int min = Integer.MAX_VALUE;\n        \n        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();\n        for(int i = 0; i < n + 1; i++){\n            adj.add(new ArrayList<>());\n        }\n        \n        for(int i = 0; i < m; i++){\n            adj.get(roads[i][0]).add(new Pair(roads[i][1],roads[i][2]));\n            adj.get(roads[i][1]).add(new Pair(roads[i][0],roads[i][2]));\n        }\n        \n        que.add(new Pair(1,Integer.MAX_VALUE));\n        int[] visited = new int[n + 1];\n         \n        while(que.size() > 0){\n            int dest = que.peek().dest;\n            int cost = que.peek().cost;\n            que.remove();\n            min = Math.min(min,cost);\n            if(visited[dest] == 0){\n                   for(int i = 0; i < adj.get(dest).size(); i++){\n                        int a = adj.get(dest).get(i).dest;\n                        int b = adj.get(dest).get(i).cost;\n                        que.add(new Pair(a,b));\n                    }\n            }\n            visited[dest] = 1;\n         \n        }\n        \n        return min;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false}