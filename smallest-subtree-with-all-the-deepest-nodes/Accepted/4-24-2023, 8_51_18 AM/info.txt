{"id":938729647,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1682306478,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/938729647/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"40.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode subtreeWithAllDeepest(TreeNode root) {\n        if(root==null)return null;\n        int lh=height(root.left);\n        int rh=height(root.right);\n        if(lh==rh)return root;\n        else if(lh>rh)return subtreeWithAllDeepest(root.left);\n        else return subtreeWithAllDeepest(root.right);\n    }\n    public int height(TreeNode root)\n    {\n        if(root==null)return 0;\n        return (int)Math.max(height(root.left),height(root.right))+1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subtree-with-all-the-deepest-nodes","has_notes":false}