{"id":927040927,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1680503783,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/927040927/","is_pending":"Not Pending","title":"Sum Game","memory":"43.2 MB","code":"class Solution {\n    public boolean sumGame(String num) {\n        int leftSum = 0;\n        int rightSum = 0;\n        int leftMove = 0;\n        int rightMove = 0;\n        for(int i = 0; i < num.length() / 2; i++) {\n            if (num.charAt(i) == '?') {\n                leftMove++;\n            } else {\n                leftSum += num.charAt(i) - '0';\n            }\n        }\n        \n        for(int i = num.length() / 2; i < num.length(); i++) {\n            if (num.charAt(i) == '?') {\n                rightMove++;\n            } else {\n                rightSum += num.charAt(i) - '0';\n            }\n        }\n\n        if ((leftMove + rightMove) % 2 == 1) {\n            return true;\n        }\n        \n        int aliceMove = (leftMove + rightMove) / 2;\n\n        int leftLower = leftSum;\n        int leftUpper = leftSum + leftMove * 9;\n\n        int rightLower = rightSum;\n        int rightUpper = rightSum + rightMove * 9;\n\n        if (leftLower > rightUpper || rightLower > leftUpper) {\n            return true;\n        }\n\n        // aliceTarget is the # of possibilities that Alice needs to \n        // eliminate by replacing ? with numbers to make sure \n        // possible range of each half has no overlapping before Bob's\n        // last move\n        int aliceTarget = Math.min(leftUpper - rightLower, rightUpper - leftLower) + 1;\n\n        return aliceMove * 9 >= aliceTarget;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-game","has_notes":false}