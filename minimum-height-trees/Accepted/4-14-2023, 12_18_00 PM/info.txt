{"id":933481662,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681454880,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/933481662/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"51.4 MB","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        List<Integer> result = new ArrayList();\n        if (n < 2) {\n            for (int i = 0; i < n; i++)\n                result.add(i);\n            \n            return result;\n        }\n        \n        int[] degree = new int[n];\n        Map<Integer, List<Integer>> graph = new HashMap();\n        for (int i = 0; i < n; i++)\n            graph.put(i, new ArrayList());\n        \n        for (int[] edge : edges) {\n            graph.get(edge[0]).add(edge[1]);\n            degree[edge[0]]++;\n            graph.get(edge[1]).add(edge[0]);\n            degree[edge[1]]++;\n        }\n        \n        Queue<Integer> queue = new ArrayDeque();\n        for (int i = 0; i < n; i++) {\n            if (degree[i] == 1)\n                queue.add(i);\n        }\n        \n        int size = 0;\n        while (!queue.isEmpty()) {\n            result = new ArrayList();\n            size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int node = queue.poll();\n                result.add(node);\n                degree[node]--;\n                \n                for (int neighbor : graph.get(node)) {                    \n                    degree[neighbor]--;\n                    \n                    if (degree[neighbor] == 1)\n                        queue.add(neighbor);\n                }\n            }\n        }\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees","has_notes":false}