{"id":850150138,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1669475989,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/850150138/","is_pending":"Not Pending","title":"Maximum Profit in Job Scheduling","memory":"50.9 MB","code":"class Solution {\n    \n    //make a class so that, everything of a job can be access at once\n    public class job{\n        int start;\n        int end;\n        int profit;\n        public job(int start,int end,int profit){\n            this.start = start;\n            this.end = end;\n            this.profit = profit;\n        }\n    }\n    \n    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n        job[] arr = new job[startTime.length];\n        for(int i=0;i<arr.length;i++){\n            arr[i] = new job(startTime[i],endTime[i],profit[i]);\n        }\n        //sort the jobs on end time basis\n        Arrays.sort(arr,(a,b)->Integer.compare(a.end,b.end));\n        \n        return func(arr);\n    }\n    \n    \n    public int func(job[] arr){\n        //dp will contain best project till each job\n        int dp[] = new int[arr.length];\n        \n        dp[0] = arr[0].profit;\n        //omax will be our global max\n        int omax = 0;\n        //for each job\n        for(int i=1; i < arr.length; i++){\n            dp[i] = Math.max(arr[i].profit, dp[i-1]);\n            //check its previous jobs\n            for(int j=i-1; j>=0 ; j--){\n                //if they dont over lap, take max\n                if(arr[j].end <= arr[i].start){\n                    dp[i] = Math.max(dp[i], arr[i].profit + dp[j]);\n                    break;\n                }\n            }\n            omax = Math.max(omax,dp[i]);\n        }\n        return omax;\n    }\n    \n}","compare_result":"111111111111111111111111111111","title_slug":"maximum-profit-in-job-scheduling","has_notes":false}