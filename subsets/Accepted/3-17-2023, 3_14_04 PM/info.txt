{"id":916785542,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046244,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/916785542/","is_pending":"Not Pending","title":"Subsets","memory":"42.8 MB","code":"class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        //to make all duplicates together\n        Arrays.sort(nums);\n        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        List<Integer> list = new ArrayList<Integer>();\n        //call the subset creation method\n        subsetCreation(0, nums, res, list);\n        //return;\n        return res;\n    }\n    public void subsetCreation(int index, int[] arr, List<List<Integer>> res, List<Integer> list){\n        res.add(new ArrayList<>(list));\n        for(int i = index;i < arr.length;i++){\n            //if we are running this loop for first time in any recursion level we can add the element\n            //otherwise check whether the element is duplicate or not \n            //if duplicate dont add it just continue\n            if(i != index && arr[i] == arr[i - 1]) continue;\n            //here i != index is the check for whether it is the first time loop is executing in a recursion level or not if not equal means it is not first time\n            list.add(arr[i]);\n            subsetCreation(i + 1, arr, res, list);\n            list.remove(list.size() - 1);\n        }\n    }\n}","compare_result":"1111111111","title_slug":"subsets","has_notes":false}