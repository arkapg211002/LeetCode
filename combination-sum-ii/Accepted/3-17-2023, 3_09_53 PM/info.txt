{"id":916783693,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679045993,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/916783693/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.6 MB","code":"class Solution {\n    List<List<Integer>> ans;\n    int candidates[];\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        // sort the array first so that duplicates occur on after another are prevented to be called again and. again\n        Arrays.sort(candidates);\n        this.candidates=candidates;\n\n        ans= new LinkedList();\n        backtrack(0,target,new LinkedList<Integer>());\n        return ans;\n\n    }\n    void backtrack(int start,int target, List<Integer> list)\n    {\n\n        if(target==0) {\n            ans.add(new LinkedList(list));\n        }\n        if(target<0) return;\n        for(int i=start;i<candidates.length;i++)\n        {\n            // to avoid duplicates that will come for example 1,1,1,2,2 start=0 skip recursion calls starting from i=1 and i=2 similarly for 2 skip 4\n            if(i>start && candidates[i]==candidates[i-1]) continue;\n\n            list.add(candidates[i]);\n            backtrack(i+1,target-candidates[i],list);\n            list.remove(list.size()-1);\n        }\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false}