{"id":913025257,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678510353,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/913025257/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"43.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int i=0;\n    public TreeNode recoverFromPreorder(String traversal) {\n        return traverse(traversal,0);\n    }\n    public TreeNode traverse(String traversal,int level)\n    {\n        if(i==traversal.length())return null;\n        int j=i,c=0;\n        while(traversal.charAt(j)=='-')\n        {\n            c+=1;\n            j+=1;\n        }\n        if(c==level)\n        {\n            int k=j;\n            while(j<traversal.length() && traversal.charAt(j)!='-')j+=1;\n            String sub=traversal.substring(k,j);\n            i=j;\n            TreeNode root=new TreeNode(Integer.parseInt(sub));\n            root.left=traverse(traversal,level+1);\n            root.right=traverse(traversal,level+1);\n            return root;\n        }\n        else return null;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal","has_notes":false}