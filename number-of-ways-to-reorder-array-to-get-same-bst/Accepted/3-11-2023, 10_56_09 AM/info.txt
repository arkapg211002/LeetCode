{"id":913038259,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678512369,"status":10,"status_display":"Accepted","runtime":"261 ms","url":"/submissions/detail/913038259/","is_pending":"Not Pending","title":"Number of Ways to Reorder Array to Get Same BST","memory":"63.3 MB","code":"class Solution {\n    \n    long dp[][] = new long[1001][1001];\n    int MOD = 1000000007;\n    \n    public int numOfWays(int[] nums) {\n        dp[0][0]=1;\n        for(int i = 1; i <= nums.length; i++){\n            dp[i][0]=1;\n            dp[i][i]=1;\n            for(int j = 1; j < i; j++){\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]) % MOD;\n            }\n        }\n        List<Integer> list = new ArrayList<>();\n        for(int val : nums) \n            list.add(val);\n        \n        return (int) solve(list)-1;\n    }\n    \n    public long solve(List<Integer> l) {\n        int size = l.size();\n        if(size <= 1) return 1;\n        \n        List<Integer> small = new ArrayList<>();\n        List<Integer> large = new ArrayList<>();\n        \n        for(int i = 1 ; i < l.size() ; i++) {\n            int val = l.get(i);\n            if(val < l.get(0))\n                small.add(val);\n            else\n                large.add(val);\n        }\n        long ansS = solve(small);\n        long ansL = solve(large);\n        long ans = (ansS * ansL) % MOD;\n        ans = (long) (ans * dp[size-1][small.size()] % MOD);\n       \n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-reorder-array-to-get-same-bst","has_notes":false}