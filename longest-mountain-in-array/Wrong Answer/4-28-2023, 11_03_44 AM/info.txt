{"id":940944370,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682660024,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940944370/","is_pending":"Not Pending","title":"Longest Mountain in Array","memory":"N/A","code":"class Solution {\n    public int longestMountain(int[] arr) {\n        int n=arr.length;\n        int dp1[]=new int[n];\n        int dp2[]=new int[n];\n        Arrays.fill(dp1,1);\n        Arrays.fill(dp2,1);\n        for(int i=0;i<n;i++)\n        {\n            for(int prev=0;prev<=i-1;prev++)\n            {\n                if(arr[prev]<arr[i] && dp1[prev]+1>dp1[i])\n                {\n                    dp1[i]=dp1[prev]+1;\n                }\n            }\n        }\n        for(int i=n-1;i>=0;i--)\n        {\n            for(int prev=n-1;prev>i;prev--)\n            {\n                if(arr[prev]<arr[i] && dp2[prev]+1>dp2[i])\n                {\n                    dp2[i]=dp2[prev]+1;\n                }\n            }\n        }\n        int max=0;\n        for(int i=0;i<n;i++)\n        {\n            if(dp1[i]>1 && dp2[i]>1)\n                max=(int)Math.max(max,dp1[i]+dp2[i]-1);\n        }\n        return max;\n    }\n}","compare_result":"111111111111111111111111101111111111111110010010010011100000111000011100000","title_slug":"longest-mountain-in-array","has_notes":false}