{"id":925453960,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680279640,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/925453960/","is_pending":"Not Pending","title":"Wiggle Subsequence","memory":"N/A","code":"class Solution {\n        public class Solution {\n\tpublic int wiggleMaxLength(int[] nums) {\n\t\tif (nums.length == 0 || nums.length == 1) {\n\t\t\treturn nums.length;\n\t\t}\n\t\tint k = 0;\n\t\twhile (k < nums.length - 1 && nums[k] == nums[k + 1]) {  //Skips all the same numbers from series beginning eg 5, 5, 5, 1\n\t\t\tk++;\n\t\t}\n\t\tif (k == nums.length - 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tint result = 2;     // This will track the result of result array\n\t\tboolean smallReq = nums[k] < nums[k + 1];       //To check series starting pattern\n\t\tfor (int i = k + 1; i < nums.length - 1; i++) {\n\t\t\tif (smallReq && nums[i + 1] < nums[i]) {\n\t\t\t\tnums[result] = nums[i + 1];\n\t\t\t\tresult++;\n\t\t\t\tsmallReq = !smallReq;    //Toggle the requirement from small to big number\n\t\t\t} else {\n\t\t\t\tif (!smallReq && nums[i + 1] > nums[i]) {\n\t\t\t\t\tnums[result] = nums[i + 1];\n\t\t\t\t\tresult++;\n\t\t\t\t\tsmallReq = !smallReq;    //Toggle the requirement from big to small number\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n}","compare_result":null,"title_slug":"wiggle-subsequence","has_notes":false}