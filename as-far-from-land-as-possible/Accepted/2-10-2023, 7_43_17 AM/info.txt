{"id":895060696,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1675995197,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/895060696/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"43.7 MB","code":"class Solution\n{\n    public int maxDistance(int[][] grid) \n    {\n        int n = grid.length;\n        int ans = -1;\n        int dist = 0;\n        Queue<int[]> qu = new LinkedList<>();\n        int[][] dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        \n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(grid[i][j] == 1){\n                    qu.add(new int[]{i, j});}\n            }\n        }\n        while(!qu.isEmpty())\n        {\n            dist++;\n            for(int x = qu.size(); x > 0; x--)\n            {\n                int[] a = qu.remove();\n                for(int[] ar : dir)\n                {\n                    int i = ar[0] + a[0], j = ar[1] + a[1];\n                    if(i >= 0 && j >= 0 && i < n && j < n && grid[i][j] == 0)\n                    {\n                        ans = dist;\n                        grid[i][j] = ans;\n                        qu.add(new int[]{i, j});\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"as-far-from-land-as-possible","has_notes":false}