{"id":940981563,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682666024,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940981563/","is_pending":"Not Pending","title":"Longest Increasing Subsequence II","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums, int k) {\n        int n=nums.length;\n        int dp[]=new int[n];\n        Arrays.fill(dp,1);\n        int ans=0;\n        for(int i=0;i<n;i++)\n        {\n            for(int prev=0;prev<=i-1;prev++)\n            {\n                if(nums[prev]<nums[i] && nums[i]-nums[prev]<=k)\n                {\n                    dp[i]=(int)Math.max(dp[i],dp[prev]+1);\n                }\n                ans=(int)Math.max(ans,dp[i]);\n            }\n        }\n        return ans;\n    }\n}","compare_result":"11100001111111101110100010101111111111111111111111111111111111111111111000000000000","title_slug":"longest-increasing-subsequence-ii","has_notes":false}