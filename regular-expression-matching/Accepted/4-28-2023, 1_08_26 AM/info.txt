{"id":940779720,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1682624306,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/940779720/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"42.8 MB","code":"class Solution {\npublic boolean isMatch(String s, String p) {\n    return helper(0,0,s,p,new Boolean[s.length()][p.length()]);\n}\npublic boolean helper(int index1,int index2, String s, String p, Boolean[][] dp) {\n    if(index1>=s.length()|| index2>= p.length()) {\n        if(index1>=s.length()&& index2>= p.length())\n            return true;\n        else  if(index2+1<p.length() && p.charAt(index2+1)=='*')  {\n        \treturn helper(index1, index2+2, s, p, dp);\n        }\n        \n            return false;\n        \n    }\n    if(dp[index1][index2] != null)\n        return dp[index1][index2];\n    \n    if(index2+1<p.length() && p.charAt(index2+1)=='*')\n    {\n    \tif(p.charAt(index2) == '.')\n        {\n            return  dp[index1][index2] = helper(index1+1,index2,s,p,dp) || helper(index1,index2+2,s,p,dp);\n        }\n    \telse {\n    \t\tif(s.charAt(index1) == p.charAt(index2))    {\n               return dp[index1][index2] =helper(index1+1,index2,s,p,dp) || helper(index1,index2+2,s,p,dp); \n            }\n    \t\telse {\n    \t\t\treturn dp[index1][index2]=helper(index1,index2+2,s,p,dp);\n    \t\t}\n    \t\t\t\n    \t}\n    }\n    else {\n    \t if(s.charAt(index1) == p.charAt(index2))  {\n            return dp[index1][index2] =helper(index1+1,index2+1,s,p,dp); \n         }\n         else if(p.charAt(index2) == '.')  {\n             return  dp[index1][index2] = helper(index1+1,index2+1,s,p,dp);\n         }\n    }\n    \n    return false;\n}\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false}