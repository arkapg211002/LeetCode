{"id":941003685,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1682670021,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/941003685/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"46.9 MB","code":"class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[] height = new int[n];\n        int maxA = 0;\n        for(int i = 0 ; i < m ; i++){\n            for(int j = 0 ; j < n ; j++){\n                if(matrix[i][j] == '1')   height[j] = height[j]+1;\n                else    height[j] = 0;\n            }\n            maxA = Math.max(maxA , maxAreaHisto(height , n));\n        }\n        return maxA;\n    }\n    \n    public int maxAreaHisto(int[] height , int n){\n        Stack<Integer> st = new Stack<>();\n        int maxA = 0;\n        for(int i = 0 ; i <= n ; i++){\n            while(!st.isEmpty() && (i == n || height[st.peek()] >= height[i])){\n                int ht = height[st.peek()];\n                st.pop();\n                int width;\n                if(st.isEmpty())    width = i;\n                else    width = i-st.peek()-1;\n                maxA = Math.max(maxA , ht*width);\n            }\n            st.push(i);\n        }\n        return maxA;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false}