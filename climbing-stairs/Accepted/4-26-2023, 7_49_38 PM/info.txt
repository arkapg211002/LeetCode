{"id":940093182,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1682518778,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/940093182/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"39 MB","code":"/*Recursion\n\nclass Solution {\n    public int climbStairs(int n) {\n        if(n==0)return 1;\n        if(n==1)return 1;\n        return climbStairs(n-1)+climbStairs(n-2);\n    }\n}*/\n\n/* Memoization\nclass Solution\n{\n    public int climbStairs(int n)\n    {\n        int dp[]=new int[n+1];\n        Arrays.fill(dp,-1);\n        dp[0]=1;\n        dp[1]=1;\n        return f(n,dp);\n    }\n    public int f(int ind,int dp[])\n    {\n        if(ind==0 || ind==1)return 1;\n        if(dp[ind]!=-1)return dp[ind];\n        return dp[ind]=f(ind-1,dp)+f(ind-2,dp);\n    }\n}\n*/\n\n/* Tabulation\nclass Solution\n{\n    public int climbStairs(int n)\n    {\n        int dp[]=new int[n+1];\n        Arrays.fill(dp,-1);\n        dp[0]=1;\n        dp[1]=1;\n        for(int ind=2;ind<=n;ind++)\n        {\n            dp[ind]=dp[ind-1]+dp[ind-2];\n        }\n        return dp[n];\n    }\n}\n*/\n\nclass Solution\n{\n    public int climbStairs(int n)\n    {\n        int prev2=1,prev=1,cur;\n        for(int ind=2;ind<=n;ind++)\n        {\n            cur=prev+prev2;\n            prev2=prev;\n            prev=cur;\n        }\n        return prev;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false}