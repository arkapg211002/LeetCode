{"id":912749748,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678463067,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/912749748/","is_pending":"Not Pending","title":"House Robber III","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    LinkedList<TreeNode>q=new LinkedList<>();\n    List<Integer>b=new ArrayList<>();\n    List<Integer>l=new ArrayList<>();\n    int e=0;\n    int o=0;\n    public int rob(TreeNode root) {\n        traverse(root);\n        //return (int)Math.max(e,o);\n        int a=Max_Sum(l,l.size()/2,l.size());\n        int b=Max_Sum(l,l.size()-(l.size()/2),l.size());\n        return (int)Math.max(a,b);\n    }\n    public void traverse(TreeNode root)\n    {\n        TreeNode p=root;\n        if(p==null)return;\n        q.add(p);\n        int level=0;\n        \n        while(q.isEmpty()==false)\n        {\n            int n=q.size();\n            for(int i=0;i<n;i++)\n            {\n                p=q.removeFirst();\n                b.add(p.val);\n                if(p.left!=null)q.add(p.left);\n                if(p.right!=null)q.add(p.right);\n            }\n            int s=0;\n            for(int i=0;i<b.size();i++)s+=b.get(i);\n            l.add(s);\n            if(level%2==0)e+=s;\n            else o+=s;\n            level+=1;\n            b=new ArrayList<>();\n        }\n    }\n    public int Max_Sum(List<Integer>arr, int K,\n                          int N)\n{\n     \n    // Stores states of dp\n    int[] dp = new int[N + 1];\n \n    // Initialise dp state\n    Arrays.fill(dp, 0);\n \n    // Stores the prefix sum\n    int[] prefix = new int[N + 1];\n \n    prefix[0] = 0;\n \n    // Update the prefix sum\n    for(int i = 1; i <= N; i++)\n    {\n        prefix[i] = prefix[i - 1] + arr.get(i-1);\n    }\n \n    // Base case for i < K\n    dp[0] = 0;\n \n    // For indices less than k\n    // take all the elements\n    for(int i = 1; i <= K - 1; i++)\n    {\n        dp[i] = prefix[i];\n    }\n \n    // For i >= K  case\n    for(int i = K ; i <= N; ++i)\n    {\n         \n        // Skip each element from i to\n        // (i - K + 1) to ensure that\n        // no K elements are consecutive\n        for(int j = i; j >= (i - K + 1); j--)\n        {\n             \n            // j-th element is skipped\n \n            // Update the current dp state\n            dp[i] = Math.max(dp[i], dp[j - 1] +\n                         prefix[i] - prefix[j]);\n        }\n    }\n \n    // dp[N] stores the maximum sum\n    return dp[N];\n}\n}","compare_result":"1100001011111111110111111111101101100101111101101101000100101001000001010000000000000000000000000000000000000000000000000000","title_slug":"house-robber-iii","has_notes":false}