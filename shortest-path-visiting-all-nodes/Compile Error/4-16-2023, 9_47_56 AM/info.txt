{"id":934516653,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1681618676,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/934516653/","is_pending":"Not Pending","title":"Shortest Path Visiting All Nodes","memory":"N/A","code":"class Solution {\n    public int shortestPathLength(int[][] graph) {\n        if(graph.length==1)\n            return 0;\n        int ansBit = (1 << graph.length) - 1;\n        int [][] visitedMap = new int [graph.length][ansBit+1]; /\n        Queue<int []> bfsQueue = new LinkedList<>();\n        for(int i=0; i<graph.length; i++)\n            bfsQueue.add(new int [] {i, 1 << i}); \n        int shortestPath = 0;\n        while(!bfsQueue.isEmpty()){\n            int size = bfsQueue.size();\n            shortestPath++;\n            for(int i=0; i<size; i++){\n                int [] state = bfsQueue.poll();\n                int nodeNum = state[0];\n                int visitedNodeBit = state[1];\n                for(int neighbors : graph[nodeNum]){\n                    int newVisitedNodeBit = visitedNodeBit | (1 << neighbors);\n                    if(visitedMap[neighbors][newVisitedNodeBit] == 1) \n                        continue;\n                    visitedMap[neighbors][newVisitedNodeBit] = 1;\n                    if(newVisitedNodeBit==ansBit)  \n                        return shortestPath;\n                    bfsQueue.add(new int [] {neighbors, newVisitedNodeBit});\n                }   \n            }\n        }\n        return -1;\n    }\n}","compare_result":null,"title_slug":"shortest-path-visiting-all-nodes","has_notes":false}