{"id":837151107,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1667625548,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/837151107/","is_pending":"Not Pending","title":"Word Search II","memory":"45.1 MB","code":"class Solution {\n    private static final char HASH_TAG = '#';\n    private Tree root = new Tree();\n    \n    public List<String> findWords(char[][] board, String[] words) {\n        for (String word : words) {\n            Tree temp = root;\n            // Test case 60/63 \n            for (int i = word.length() - 1; i >= 0; i--) {\n                int idx = word.charAt(i) - 'a';\n                if (temp.val[idx] == null) {\n                    temp.val[idx] = new Tree();\n                    temp.val[idx].parent = temp;\n                    temp.val[idx].idx = idx;\n                }\n                temp = temp.val[idx];\n            }\n            temp.word = word;\n        }    \n        return searchWord(board);\n    }\n    \n    private List<String> searchWord(char[][] board) {\n        List<String> res = new ArrayList<>();\n        \n        for (int i = 0; i < board.length; i++)\n            for (int j = 0; j < board[0].length; j++) {\n                Tree temp = root;\n                checkWord(res, i, j, board, temp);\n            }\n        \n        return res;\n    }\n    \n    private void checkWord(List<String> res, int y, int x, char[][] board, Tree temp) {\n        \n        if (x >= board[0].length || x < 0\n            || y >= board.length || y < 0)\n            return;\n        \n        char ch = board[y][x];\n        if (ch== HASH_TAG || temp.val[ch - 'a'] == null)\n            return;\n        \n        temp = temp.val[ch - 'a'];\n        \n        if (temp.word != null) {\n            res.add(temp.word);\n            temp.word = null; // Test case 17/63: When there is more than one answer\n            Tree ptr = temp;\n            while (ptr.parent != null \n                    && ptr.isEmpty()) {\n                int idx = ptr.idx;\n                ptr = ptr.parent;\n                ptr.val[idx] = null;\n            }\n        }\n        \n        board[y][x] = HASH_TAG;\n\n        checkWord(res, y, x + 1, board, temp);\n        checkWord(res, y, x - 1, board, temp);\n        checkWord(res, y + 1, x, board, temp);\n        checkWord(res, y - 1, x, board, temp);\n        \n        board[y][x] = ch;\n    }\n    \n    class Tree {\n        Tree parent;\n        Tree[] val = new Tree[26];\n        String word;\n        int idx;\n\n        public boolean isEmpty() {\n            for (int i = 0; i < 26; i++) \n                if (val[i] != null)\n                    return false;\n\n            return true;\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false}