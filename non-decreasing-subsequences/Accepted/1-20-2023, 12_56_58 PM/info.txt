{"id":881687481,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1674199618,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/881687481/","is_pending":"Not Pending","title":"Non-decreasing Subsequences","memory":"49.9 MB","code":"class Solution {\n    List<List<Integer>>vec=new ArrayList<>();\n    HashSet<List<Integer>>set=new HashSet<>();\n    void solve(int []nums, int prev, List<Integer>op, int idx){\n        if(idx==nums.length){\n            if(op.size()>1){\n                set.add(op);\n            }\n            return;\n        }\n        if(prev==-1 || nums[idx]>=nums[prev]){\n            List<Integer>op1=new ArrayList<>(op);\n            op1.add(nums[idx]);\n            solve(nums,idx,op1,idx+1);\n        }\n        solve(nums,prev,op,idx+1);\n        \n    }\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        List<Integer>op=new ArrayList<>();\n        solve(nums,-1,op, 0);\n        Iterator<List<Integer>> it = set.iterator();\n        while(it.hasNext())vec.add(it.next());\n        return vec;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-decreasing-subsequences","has_notes":false}