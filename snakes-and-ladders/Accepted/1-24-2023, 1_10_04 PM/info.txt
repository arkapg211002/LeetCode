{"id":884227310,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1674546004,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/884227310/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"42.6 MB","code":"class Solution {\n    public int snakesAndLadders(int[][] board) {\n        int n=board.length;\n        Map<Integer,Integer>hm=new HashMap<>();\n        hm.put(1,0);//as we are starting from 1st position so we are adding 1 and the number of steps taken are 0\n        Queue<Integer>q=new LinkedList<>();\n        q.add(1);//for starting bfs\n        while(!q.isEmpty()){\n            int p=q.poll();\n            if(p==n*n) return hm.get(p);\n            for(int i=p+1;i<=Math.min(p+6,n*n);i++){\n                int next=check(i,n);//getting the next most suitable position to jump\n                int row=next/n,col=next%n;\n                int ns=board[row][col]==-1?i:board[row][col];\n                /*normal BFS*/\n                if(!hm.containsKey(ns)){\n                    hm.put(ns,hm.get(p)+1);\n                    q.offer(ns);\n                }\n            }\n        }\n        return -1;\n    }\n    public static int check(int i,int n){\n        int q=(i-1)/n,r=(i-1)%n;\n        int row=n-1-q;\n        int col=row%2!=n%2?r:n-1-r;\n        return row*n+col;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders","has_notes":false}