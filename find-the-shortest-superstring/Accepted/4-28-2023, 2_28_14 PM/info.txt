{"id":941016830,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1682672294,"status":10,"status_display":"Accepted","runtime":"336 ms","url":"/submissions/detail/941016830/","is_pending":"Not Pending","title":"Find the Shortest Superstring","memory":"42.1 MB","code":"class Solution {\n    public String shortestSuperstring(String[] words) {\n        int n = words.length;\n        int[][] distance = new int[n][n];\n        for(int i=0; i<n; i++){\n            for(int j=0; j<n; j++){\n                int min = Math.min(words[i].length(), words[j].length());\n                for(int k=min; k>=0; k--)\n                {\n                    if(words[i].endsWith(words[j].substring(0,k))) \n                    {\n                        distance[i][j] = words[j].length() - k;\n                        break;\n                    }\n                }\n            }\n        }\n        int dp[][] = new int[(1<<n)][n];\n        int path[][] =  new int[(1<<n)][n];\n        String ans = \"\";\n        int len = Integer.MAX_VALUE;\n        for(int i = 0; i<n; i++){\n           for(int j=0; j< ( 1<<n); j++){\n                Arrays.fill(dp[j], -1);\n                Arrays.fill(path[j], -1);\n            }\n            int tsp = tsp(i, 0, distance, dp, path, n);\n            String str = createPath(words, i, distance, path);\n            if(str.length() < len){\n                ans = str;\n                len = str.length();\n            }\n            \n        }\n        return ans;\n    }\n    \n    public int tsp(int city, int mask, int[][] distance, int[][] dp, int[][] path, int n)\n    { \n        if(mask == ((1<<n) - 1)) return 0;\n        if(dp[mask][city] != -1){\n            return dp[mask][city];\n        }\n        int ans = Integer.MAX_VALUE;\n        int nextCity = -1;\n        for(int i = 0; i<n; i++)\n        {\n            if((mask & (1<<i)) == 0 )\n            {\n                int dis = distance[city][i] + tsp(i, (mask | (1<<i)), distance, dp, path, n);\n                if(dis < ans){\n                    ans = dis;\n                    nextCity = i;\n                }\n            }\n        }\n        path[mask][city] = nextCity;\n        dp[mask][city] = ans;\n        return ans;\n    }\n    \n    public String createPath(String[] words, int start, int[][] distance, int[][] path)\n    {\n        int c = start;\n        StringBuilder sb = new StringBuilder(words[c]);\n        int mask = (1<<start);\n        int x = path[mask][c];\n        while(x != -1){\n            sb.append(words[x].substring(words[x].length() - distance[c][x]));\n            mask |= (1<<x);\n            c = x;\n            x = path[mask][x];\n        }\n        return sb.toString();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-shortest-superstring","has_notes":false}