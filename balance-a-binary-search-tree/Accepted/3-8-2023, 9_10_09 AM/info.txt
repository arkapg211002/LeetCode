{"id":911221292,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678246809,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/911221292/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"46.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode p=null;\n    public TreeNode balanceBST(TreeNode root) {\n        List<Integer>l=new ArrayList<>();\n        inorder(root,l);\n        //System.out.println(l);\n        return bst(l,0,l.size()-1,p);\n        \n    }\n    public void inorder(TreeNode root,List<Integer>l)\n    {\n        if(root==null)return;\n        inorder(root.left,l);\n        l.add(root.val);\n        inorder(root.right,l);\n    }\n    public TreeNode bst(List<Integer>l,int left,int right,TreeNode p)\n    {\n        if(left>right)return null;\n        int m=(left+right)/2;\n        p=new TreeNode(l.get(m));\n        p.left=bst(l,left,m-1,p.left);\n        p.right=bst(l,m+1,right,p.right);\n        return p;\n    }\n}","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false}