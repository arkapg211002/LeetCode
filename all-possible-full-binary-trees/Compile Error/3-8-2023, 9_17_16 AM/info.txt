{"id":911224190,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678247236,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/911224190/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"N/A","code":"Map<Integer , List<TreeNode>> map = new HashMap<>();\npublic List<TreeNode> allPossibleFBT(int n) {\n    \n    if(!map.containsKey(n)){\n        List<TreeNode> res = new ArrayList<>();\n\n        if(n == 1){\n            res.add(new TreeNode(0,null,null));\n        } else {\n            for(int i = 1 ; i < n ; i += 2){\n                List<TreeNode> leftSubtree = allPossibleFBT(i);\n                List<TreeNode> rightSubtree = allPossibleFBT(n - i - 1);\n\n                for(TreeNode left : leftSubtree){\n                    for(TreeNode right : rightSubtree){\n                        res.add(new TreeNode(0,left,right));\n                    }\n                }\n            }\n        }\n        map.put(n , res);\n    }\n    \n    return map.get(n);\n}","compare_result":null,"title_slug":"all-possible-full-binary-trees","has_notes":false}