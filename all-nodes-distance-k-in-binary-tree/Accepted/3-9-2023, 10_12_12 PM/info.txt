{"id":912188228,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678380132,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/912188228/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"42.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<TreeNode>b=new ArrayList<>();\n    List<Integer>l=new ArrayList<>();\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n        //b=new ArrayList<>();\n        boolean found=find(root,target.val);\n        for(int i=0;i<b.size();i++)\n        {\n            klevelsdown(b.get(i),k-i,(i==0)?null:b.get(i-1));\n        }\n        return l;\n    }\n    public boolean find(TreeNode n,int d)\n    {\n        if(n==null)return false;\n        if(n.val==d)\n        {\n            b.add(n);\n            return true;\n        }\n        boolean lt=find(n.left,d);\n        if(lt==true)\n        {\n            b.add(n);\n            return true;\n        }\n        boolean rt=find(n.right,d);\n        if(rt==true)\n        {\n            b.add(n);\n            return true;\n        }\n        return false;\n    }\n    public void klevelsdown(TreeNode p,int k,TreeNode next)\n    {\n        if(p==null || k<0 || p==next)return;\n        if(k==0)l.add(p.val);\n        klevelsdown(p.left,k-1,next);\n        klevelsdown(p.right,k-1,next);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false}