{"id":933533787,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681462443,"status":10,"status_display":"Accepted","runtime":"1206 ms","url":"/submissions/detail/933533787/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"50.7 MB","code":"class Solution {\n    public List<Integer> eventualSafeNodes(int[][] graph) {\n        ArrayList<ArrayList<Integer>>l=new ArrayList<>();\n        for(int i=0;i<graph.length;i++)l.add(new ArrayList<>());\n        for(int i=0;i<graph.length;i++)\n        {\n            for(int j=0;j<graph[i].length;j++)\n                l.get(i).add(graph[i][j]);\n        }\n        \n        List<Integer>ans=new ArrayList<>();\n        for(int i=0;i<graph.length;i++)\n        {\n            int vis[]=new int[graph.length];\n            int pathVis[]=new int[graph.length];\n            if(dfs(i,l,vis,pathVis)==false)ans.add(i);\n        }\n        return ans;\n    }\n    public boolean dfs(int node,ArrayList<ArrayList<Integer>>l,int vis[],int pathVis[]) \n    {\n        vis[node]=1;\n        pathVis[node]=1;\n        for(int it : l.get(node)) \n        {\n            if(vis[it] == 0) {\n                if(dfs(it,l,vis,pathVis)==true) \n                    return true; \n            }\n            else if(pathVis[it] == 1)return true;\n        }\n        pathVis[node] = 0; \n        return false; \n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false}