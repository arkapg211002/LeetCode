{"id":933967685,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1681538573,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/933967685/","is_pending":"Not Pending","title":"Get Watched Videos by Your Friends","memory":"44.2 MB","code":"class Solution {\n    public List<String> watchedVideosByFriends(List<List<String>> watchedVideos, int[][] friends, int id, int l) {\n        int n = friends.length;\n        \n        \n        Queue<Integer> q = new LinkedList<>();\n        q.add(id);\n        HashMap<String,Integer> hm = new HashMap<>();\n        int level=0;\n        int vis[] = new int[n];\n        vis[id]=1;\n        while(!q.isEmpty()){\n            int size = q.size();\n            \n            for(int i=0;i<size;i++){\n                int node = q.poll();\n                if(level == l){\n                    for(String s:watchedVideos.get(node))hm.put(s,hm.getOrDefault(s,0)+1);\n                    continue;\n                }\n                for(int it:friends[node])if(vis[it]!=1){\n                    vis[it]=1;\n                    q.add(it);\n                }\n            }\n            level++;\n        }\n        \n        List<String> ans = new ArrayList<>(hm.keySet());\n        \n        Collections.sort(ans,(a,b)->hm.get(a)==hm.get(b)?a.compareTo(b):hm.get(a)-hm.get(b));\n        \n        return ans;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"get-watched-videos-by-your-friends","has_notes":false}