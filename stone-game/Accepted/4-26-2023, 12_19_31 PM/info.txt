{"id":939915788,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1682491771,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/939915788/","is_pending":"Not Pending","title":"Stone Game","memory":"43.1 MB","code":"class Solution {\n    int n;\n    int dp[][];\n\n    public boolean stoneGame(int[] piles) {\n        n = piles.length;\n        dp = new int[n][n];\n\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(dp[i], -1);\n        }\n\n        stoneGameHelper(0, piles, 0, piles.length - 1);\n\n        return dp[0][n - 1] > 0;\n    }\n\n    private int stoneGameHelper(int playerToPlay, int[] piles, int start, int end) {\n        if (start > end) {  // Base case for bounds\n            return 0;\n        }\n\n        if (start == end) {  // only remaining pile\n            return piles[start];\n        }\n\n        if (dp[start][end] != -1) return dp[start][end]; // Already computed window\n\n        int stones;\n        if (playerToPlay == 0) { // '0' is Alex\n            stones = Math.max(piles[start] + stoneGameHelper(1, piles, start + 1, end),\n                    piles[end] + stoneGameHelper(1, piles, start, end - 1));\n        } else { // Lee plays and deducts our points, since its optimal play we take the most negative value\n            stones = Math.min(-piles[start] + stoneGameHelper(0, piles, start + 1, end),\n                    -piles[end] + stoneGameHelper(0, piles, start, end - 1));\n        }\n        dp[start][end] = stones;\n        return stones;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"stone-game","has_notes":false}