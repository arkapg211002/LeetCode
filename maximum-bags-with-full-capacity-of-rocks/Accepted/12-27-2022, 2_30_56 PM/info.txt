{"id":866249250,"lang":"java","lang_name":"Java","time":"4 months, 1 week","timestamp":1672131656,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/866249250/","is_pending":"Not Pending","title":"Maximum Bags With Full Capacity of Rocks","memory":"52.3 MB","code":"class Solution {\n  public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) {\n    final int n = capacity.length;\n    for (int i = 0; i < n; i++) {\n      capacity[i] -= rocks[i];\n    }\n\n    // always pick the smallest left bag\n    Arrays.sort(capacity);\n    int count = 0;\n    for (int i = 0; i < n && additionalRocks > 0; i++) {\n      if (additionalRocks >= capacity[i]) {\n        count++;\n      }\n      additionalRocks -= capacity[i];\n    }\n\n    return count;\n  }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-bags-with-full-capacity-of-rocks","has_notes":false}