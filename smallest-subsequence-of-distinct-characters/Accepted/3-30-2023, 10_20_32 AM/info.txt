{"id":924606909,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680151832,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/924606909/","is_pending":"Not Pending","title":"Smallest Subsequence of Distinct Characters","memory":"40.6 MB","code":"class Solution\n{\n    public String smallestSubsequence(String s)\n    {\n        Stack<Character> stack=new Stack<>();\n        int[] freq=new int[26];\n        boolean[] exists=new boolean[26];\n        \n        for(int i=0;i<s.length();i++)\n        {\n            char ch=s.charAt(i);\n            freq[ch-'a']+=1;\n        }\n\n        for(int i=0;i<s.length();i++)\n        {\n            char ch=s.charAt(i);\n            freq[ch-'a']-=1;\n            if(exists[ch-'a']==true)\n                continue;\n\n            while(stack.size()>0 && stack.peek() >ch && freq[stack.peek()-'a']>0)\n            {\n                exists[stack.pop()-'a']=false;\n            }\n            stack.push(ch);\n            exists[ch-'a']=true; \n        }\n        \n        char[] res=new char[stack.size()];\n        int i=res.length-1;\n        while(i>=0)\n        {\n            res[i]=stack.pop();\n            i-=1;\n        }\n        return new String(res);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subsequence-of-distinct-characters","has_notes":false}