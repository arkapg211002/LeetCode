{"id":924343293,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680109373,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/924343293/","is_pending":"Not Pending","title":"Advantage Shuffle","memory":"62.9 MB","code":"class Solution {\n    public int[] advantageCount(int[] nums1, int[] nums2) {\n        // Sort nums2 in descending order\n        PriorityQueue<int[]> pq = new PriorityQueue<>((int[] a, int[] b) -> {\n            return b[0] - a[0];\n        });\n\n        for (int i = 0; i < nums2.length; i++) {\n            pq.offer(new int[]{nums2[i], i});\n        }\n\n        // Sort num1 in ascending order\n        Arrays.sort(nums1);\n\n        int[] res = new int[nums1.length];\n        int left = 0, right = nums1.length - 1;\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            if (nums1[right] > cur[0]) {\n                // nums1 is larger, make it compare to nums2\n                res[cur[1]] = nums1[right];\n                right--;\n            } else {\n                // cannot compare to nums2, pick whatever is the smallest\n                res[cur[1]] = nums1[left];\n                left++;\n            }\n        }\n\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"advantage-shuffle","has_notes":false}