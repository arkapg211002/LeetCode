{"id":877230569,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1673587391,"status":10,"status_display":"Accepted","runtime":"123 ms","url":"/submissions/detail/877230569/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"104.4 MB","code":"class Solution {\n  public int longestPath(int[] parent, String s) {\n    final int n = parent.length;\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int i = 1; i < n; ++i)\n      graph[parent[i]].add(i);\n\n    longestPathDownFrom(graph, 0, s);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private int longestPathDownFrom(List<Integer>[] graph, int u, final String s) {\n    int max1 = 0;\n    int max2 = 0;\n\n    for (final int v : graph[u]) {\n      final int res = longestPathDownFrom(graph, v, s);\n      if (s.charAt(u) == s.charAt(v))\n        continue;\n      if (res > max1) {\n        max2 = max1;\n        max1 = res;\n      } else if (res > max2) {\n        max2 = res;\n      }\n    }\n\n    ans = Math.max(ans, 1 + max1 + max2);\n    return 1 + max1;\n  }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-path-with-different-adjacent-characters","has_notes":false}