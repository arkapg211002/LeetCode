{"id":797983779,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1662993403,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/797983779/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"96.4 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        if(head.next==null) return true;\n        \n        ListNode slow=head;\n        ListNode fast=head;\n        ListNode temp=head;\n\t\t\n\t\t//diving the list in two halves\n        \n        while(fast!=null&&fast.next!=null){\n            temp=slow;\n            slow=slow.next;\n            fast=fast.next.next;\n        }\n        temp.next=null;\n        ListNode prev=null;\n        \n        //reversing the second list\n\t\t\n       while(slow!=null){\n           ListNode next_node=slow.next;\n           slow.next=prev;\n           prev=slow;\n           slow=next_node;\n       }\n       \n        //comparing the values of nodes to check if palindrome or not\n\t\t\n        while(head!=null&&prev!=null){\n      if(head.val!=prev.val) return false;\n            head=head.next;\n            prev=prev.next;\n        }\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false}