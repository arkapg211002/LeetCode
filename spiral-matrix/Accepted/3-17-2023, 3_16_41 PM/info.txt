{"id":916786751,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679046401,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/916786751/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"40.5 MB","code":"class Solution {\n\n    public List<Integer> spiralOrder(int[][] matrix) {\n\n        int m = matrix.length, n = matrix[0].length;\n        List<Integer> result = new ArrayList<>(m * n);\n\n        int top = 0, left = 0;\n        for (int rows = m, cols = n; rows >= 1 && cols >= 1; rows -= 2, cols -= 2) \n            traverseOneRing(matrix, top++, left++, rows, cols, result);\n\n        return result;\n    }\n\t\n    private void traverseOneRing(int[][] matrix, int top, int left, int rows, int cols, List<Integer> result) {\n\n        int bottom = top + rows, right = left + cols;\n\n        for (int i = left; i < right; i++) result.add(matrix[top][i]);\n        if (rows == 1) return;\n\n        for (int i = top + 1; i < bottom; i++) result.add(matrix[i][right - 1]);\n        if (cols == 1) return;\n\n        for (int i = right - 2; i >= left; i--) result.add(matrix[bottom - 1][i]);\n        if (rows == 2) return;\n\n        for (int i = bottom - 2; i > top; i--) result.add(matrix[i][left]);\n    }\n}","compare_result":"11111111111111111111111","title_slug":"spiral-matrix","has_notes":false}