{"id":916781458,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1679045703,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/916781458/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"54.8 MB","code":"class Trie {\n\nprivate TriesNode rootNode; \n\nclass TriesNode{\n    \n    private char key;\n    private boolean isEnd;\n    \n    private Map<Character,TriesNode> preFixMap;\n    \n    public TriesNode(char key){\n        this.key = key;\n        preFixMap = new HashMap<>();\n    }\n}\n\npublic Trie() {\n    rootNode = new TriesNode('/');\n}\n\npublic void insert(String word) {\n    \n    TriesNode tempNode = rootNode;\n    for(int i = 0 ; i <word.length();i++){\n          char c = word.charAt(i);\n          TriesNode findNode = tempNode.preFixMap.get(c);\n          if(findNode == null){\n              findNode=new TriesNode(c);\n              tempNode.preFixMap.put(c,findNode);\n          }\n         tempNode = findNode;\n    }\n    tempNode.isEnd = true;\n    \n}\n\npublic boolean search(String word) {\n    TriesNode searchNode = searchHelper(word);\n    return searchNode != null && searchNode.isEnd; \n}\n\npublic boolean startsWith(String prefix) {\n      return searchHelper(prefix) != null;\n}\npublic TriesNode searchHelper(String word){\n    \n      TriesNode tempNode = rootNode; \n     for(int i = 0 ; i <word.length();i++){\n          char c = word.charAt(i);\n          TriesNode findNode = tempNode.preFixMap.get(c);\n          if(findNode == null){\n              return null;\n          }\n         tempNode = findNode;\n    }\n    return tempNode;\n}\n}","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}