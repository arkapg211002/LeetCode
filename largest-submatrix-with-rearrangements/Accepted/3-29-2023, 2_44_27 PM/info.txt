{"id":924130789,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1680081267,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/924130789/","is_pending":"Not Pending","title":"Largest Submatrix With Rearrangements","memory":"74.2 MB","code":"class Solution {\n    public int largestSubmatrix(int[][] matrix) {\n    int area = 0;\n\n    for(int i = 0; i < matrix.length; i++) {\n        TreeMap<Integer, Integer> map = new TreeMap<>(Collections.reverseOrder());\n        for(int j = 0; j < matrix[i].length; j++) {\n            if(matrix[i][j] == 1) {\n                if(i > 0)\n                    matrix[i][j] += matrix[i-1][j];\n\n                map.put(matrix[i][j], map.getOrDefault(matrix[i][j], 0)+1);\n            }\n        }\n\n        int w = 0;\n        for(int key : map.keySet()) {\n            w += map.get(key);\n            area = Math.max(area, w * key);\n        } \n\n    }\n\n    return area;\n}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"largest-submatrix-with-rearrangements","has_notes":false}