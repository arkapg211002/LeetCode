{"id":940132381,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1682523793,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/940132381/","is_pending":"Not Pending","title":"House Robber II","memory":"40.4 MB","code":"class Solution {\n    public int rob(int[] nums) {\n        int n=nums.length;\n        if(n==1)return nums[0];\n        int a[]=new int[nums.length-1];\n        int b[]=new int[nums.length-1];\n        for(int i=0;i<nums.length-1;i++)\n            a[i]=nums[i];\n        for(int i=1;i<nums.length;i++)\n            b[i-1]=nums[i];\n        int dp[]=new int[n-1];\n        Arrays.fill(dp,-1);\n        int ad=f(n-2,a,dp);\n        Arrays.fill(dp,-1);\n        int bd=f(n-2,b,dp);\n        return (int)Math.max(ad,bd);\n    }\n    public int f(int ind,int nums[],int dp[])\n    {\n        if(ind < 0) return 0;\n        if(ind==0)return nums[ind];\n        if(dp[ind] != -1)return dp[ind];\n        int notpick=0+f(ind-1,nums,dp);\n        int pick=nums[ind]+f(ind-2,nums,dp);\n        return dp[ind]=(int)Math.max(notpick,pick);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-ii","has_notes":false}