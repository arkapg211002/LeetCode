{"id":930253189,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1680975391,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/930253189/","is_pending":"Not Pending","title":"Clone Graph","memory":"43 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    // A mapping of each node in the old graph to its corresponding node in the newGraph\n    HashMap<Node, Node> mp = new HashMap<>();\n    public Node cloneGraph(Node node) {\n        if (node == null) return null;\n        if (mp.containsKey(node)) return mp.get(node);\n\n        Node newNode = new Node(node.val);\n        mp.put(node, newNode);\n        \n        for (Node nb: node.neighbors) {\n            newNode.neighbors.add(cloneGraph(nb));\n        }\n\n        return newNode;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}