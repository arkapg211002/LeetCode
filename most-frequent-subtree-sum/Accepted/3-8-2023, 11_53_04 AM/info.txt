{"id":911295948,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678256584,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/911295948/","is_pending":"Not Pending","title":"Most Frequent Subtree Sum","memory":"42.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private int mostFrequency = 0;\n    private int dfs(TreeNode root, Map<Integer, Integer> map){\n        if(root == null){\n            return 0;\n        }\n        int sum = root.val + dfs(root.left, map) + dfs(root.right, map);\n        int frequency = map.getOrDefault(sum, 0) + 1;\n        map.put(sum, frequency);\n        if(frequency > mostFrequency){\n            mostFrequency = frequency;\n        }\n        return sum;\n    }\n    public int[] findFrequentTreeSum(TreeNode root) {\n        Map<Integer, Integer> map = new HashMap<>();\n        dfs(root, map);\n        List<Integer> list = new ArrayList<>();\n        for(int key : map.keySet()){\n            if(map.get(key) == mostFrequency){\n                list.add(key);\n            }\n        }\n        return list.stream().mapToInt(i -> i).toArray();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"most-frequent-subtree-sum","has_notes":false}