{"id":913025933,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678510453,"status":10,"status_display":"Accepted","runtime":"288 ms","url":"/submissions/detail/913025933/","is_pending":"Not Pending","title":"Cycle Length Queries in a Tree","memory":"72.8 MB","code":"class Solution {\n    public int[] cycleLengthQueries(int n, int[][] queries) {\n        int[] res = new int[queries.length];\n        int ind = 0;\n        for(int[] q: queries) {\n            int lca = findLCA(q[0], q[1]);\n            res[ind++] = findDist(q[0]) - findDist(lca) + findDist(q[1]) - findDist(lca) + 1;\n        }\n        return res;\n        \n        \n    }\n    public static int findLCA(int u, int v) {  \n        int max = Math.max(u,v);\n        int min = Math.min(u,v);\n        HashSet<Integer> hset = new HashSet<>();\n        while(max != 0) {\n            hset.add(max);\n            max = max/2;\n        }\n        while(min != 0) {\n            if(hset.contains(min)) return min;\n            min = min/2;\n        }\n        return 1;  \n    }\n    public static int findDist(int num) {\n         int mssb = 0;\n         while(num > 0) {\n             num = num>>1;\n             mssb++;\n         }\n        return mssb;\n    }\n    \n}","compare_result":"111111111111111111111111111","title_slug":"cycle-length-queries-in-a-tree","has_notes":false}