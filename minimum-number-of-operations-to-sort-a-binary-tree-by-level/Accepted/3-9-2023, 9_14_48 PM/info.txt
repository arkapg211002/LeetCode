{"id":912156654,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678376688,"status":10,"status_display":"Accepted","runtime":"617 ms","url":"/submissions/detail/912156654/","is_pending":"Not Pending","title":"Minimum Number of Operations to Sort a Binary Tree by Level","memory":"61.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int indexOf(int[] arr, int ele)\n    {\n        for (int i = 0; i < arr.length; i++)\n        {\n            if (arr[i] == ele) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public void swap(int[] arr, int i, int j)\n    {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    public int minSwaps(int[] arr, int N)\n    {\n        int ans = 0;\n        int[] temp = Arrays.copyOfRange(arr, 0, N);\n        Arrays.sort(temp);\n        for (int i = 0; i < N; i++)\n        {\n            if (arr[i] != temp[i])\n            {\n                ans++;\n                swap(arr, i, indexOf(arr, temp[i]));\n            }\n        }\n        return ans;\n    }\n    public int minimumOperations(TreeNode root) {\n        if(root.left == null && root.right == null) return 0;\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        int ans = 0;\n        while(!q.isEmpty()){\n            int size = q.size();\n            for(int i=0; i<size; i++){\n                TreeNode node = q.poll();\n                if(node.left != null){\n                    q.offer(node.left);\n                }\n                if(node.right != null){\n                    q.offer(node.right);\n                }\n                \n            }\n            int[] arr = new int[q.size()];\n            int k=0;\n            for(TreeNode num: q){\n                arr[k++] = num.val;\n            }\n            ans += minSwaps(arr, k);\n        }\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","has_notes":false}