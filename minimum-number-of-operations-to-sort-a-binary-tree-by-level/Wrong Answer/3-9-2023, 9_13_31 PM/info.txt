{"id":912156032,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678376611,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/912156032/","is_pending":"Not Pending","title":"Minimum Number of Operations to Sort a Binary Tree by Level","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    LinkedList<TreeNode>q=new LinkedList<>();\n    List<Integer>b=new ArrayList<>();\n    int m=0;\n    public int minimumOperations(TreeNode root) {\n        if(root==null)return 0;\n        level(root);\n        return m;\n    }\n    public void level(TreeNode root)\n    {\n        TreeNode p=root;\n        if(p==null)return;\n        q.addLast(p);\n        while(q.isEmpty()==false)\n        {\n            int n=q.size();\n            int c=0;\n            for(int i=0;i<n;i++)\n            {\n                p=q.removeFirst();\n                b.add(p.val);\n                if(p.left!=null)q.add(p.left);\n                if(p.right!=null)q.add(p.right);\n            }\n            m+=minswaps(b);\n            b=new ArrayList<>();\n        }\n    }\n    public int minswaps(List<Integer> b)\n    {\n        List<Integer>l=new ArrayList<>();\n        l.addAll(b);\n        HashMap<Integer,Integer>h=new HashMap<>();\n        for(int i=0;i<l.size();i++)\n        {\n            h.put(b.get(i),i);\n        }\n        Collections.sort(l);\n        int ans=0;\n        for(int i=0;i<l.size();i++)\n        {\n            if(b.get(i)!=l.get(i))\n            {\n                ans+=1;\n                int in=b.get(i);\n                swap(b, i, h.get(l.get(i)));\n                h.put(in, h.get(l.get(i)));\n                h.put(l.get(i), i);\n            }\n        }\n        return ans;\n    }\n    public void swap(List<Integer> b, int i, int j)\n    {\n        int temp=b.get(i);\n        b.set(i,b.get(j));\n        b.set(j,temp);\n    }\n}","compare_result":"11111111111111111111111111111111100000000000010000100000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000","title_slug":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","has_notes":false}