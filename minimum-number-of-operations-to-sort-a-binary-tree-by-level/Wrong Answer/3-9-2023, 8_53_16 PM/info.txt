{"id":912145306,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678375396,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/912145306/","is_pending":"Not Pending","title":"Minimum Number of Operations to Sort a Binary Tree by Level","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    LinkedList<TreeNode>q=new LinkedList<>();\n    List<Integer>b=new ArrayList<>();\n    int m=0;\n    public int minimumOperations(TreeNode root) {\n        if(root==null)return 0;\n        level(root);\n        return m;\n    }\n    public void level(TreeNode root)\n    {\n        TreeNode p=root;\n        if(p==null)return;\n        q.addLast(p);\n        while(q.isEmpty()==false)\n        {\n            int n=q.size();\n            int c=0;\n            for(int i=0;i<n;i++)\n            {\n                p=q.removeFirst();\n                b.add(p.val);\n                if(p.left!=null)q.add(p.left);\n                if(p.right!=null)q.add(p.right);\n            }\n            List<Integer>l=new ArrayList<>();\n            l.addAll(b);\n            Collections.sort(b);\n            for(int j=0;j<b.size();j++)\n            {\n                if(b.get(j)!=l.get(j))c+=1;\n            }\n            m+=(int)Math.ceil(c*1.0/2);\n            b=new ArrayList<>();\n        }\n    }\n}","compare_result":"11111111111111111011111111111111100000010000010000100000001001000000000000000010000000000000000000000000000000000000000000000000001110000000000011","title_slug":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","has_notes":false}