{"id":933481304,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1681454837,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/933481304/","is_pending":"Not Pending","title":"Evaluate Division","memory":"40.8 MB","code":"class Solution {\n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        Map<String, Map<String, Double>> neib = new HashMap<>();\n        for (int i = 0; i < equations.size(); i++) {\n            neib.putIfAbsent(equations.get(i).get(0), new HashMap<>());\n            neib.putIfAbsent(equations.get(i).get(1), new HashMap<>()); //if a/b = 2\n            neib.get(equations.get(i).get(0)).put(equations.get(i).get(1), values[i]); //a = 2b\n            neib.get(equations.get(i).get(1)).put(equations.get(i).get(0), 1 / values[i]); //b = 1/2a\n        }\n\n        double[] res = new double[queries.size()];\n        for (int i = 0; i < queries.size(); i++) {\n            res[i] = dfs(queries.get(i).get(0), queries.get(i).get(1), neib, new HashSet<>());\n        }\n        return res;\n    }\n\nprivate double dfs(String curr, String target, Map<String, Map<String, Double>> neib, HashSet<String> visited) {\n        if (!neib.containsKey(curr))\n            return -1; //no element in graph at all (x/x in first example)\n        visited.add(curr);\n        if (curr.equals(target))\n            return 1;\n        for (Map.Entry<String, Double> entry : neib.get(curr).entrySet()) {\n            if (visited.contains(entry.getKey())) continue;\n            double res = dfs(entry.getKey(), target, neib, visited);\n            if (res > 0) \n                return res * entry.getValue();\n        }\n        return -1; //no correlation between curr and target found \n    }\n}","compare_result":"111111111111111111111111","title_slug":"evaluate-division","has_notes":false}