{"id":835227007,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1667374624,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/835227007/","is_pending":"Not Pending","title":"Minimum Genetic Mutation","memory":"41.6 MB","code":"class Solution {\n    public int minMutation(String start, String end, String[] bank) {\n        char[] choices={'A', 'C', 'G','T'};\n        Set<String> bankSet=new HashSet<String>();\n        Set<String> seen=new HashSet<String>();\n\n        for(String b:bank){\n            bankSet.add(b);\n        }\n        Queue<String> queue=new LinkedList<String>();\n        queue.offer(start);\n        seen.add(start);\n\n        int level=0;\n        char[] currArr;\n        while(!queue.isEmpty()){\n          int size=queue.size();\n\n          while(size-->0){\n            String curr=queue.poll();\n            if(curr.equals(end)) return level;\n            currArr=curr.toCharArray();\n\n            for(int i=0;i<currArr.length;i++){\n                char old=currArr[i];\n           \n            for(char c:choices){\n                currArr[i]=c;\n                String newStr=new String(currArr);\n                if(!seen.contains(newStr)&& bankSet.contains(newStr)){\n                    queue.offer(newStr);\n                    seen.add(newStr);\n\n                }\n            }\n            currArr[i]=old;\n             }\n          }\n          level++;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111","title_slug":"minimum-genetic-mutation","has_notes":false}