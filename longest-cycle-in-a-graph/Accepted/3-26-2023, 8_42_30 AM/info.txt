{"id":922159839,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1679800350,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/922159839/","is_pending":"Not Pending","title":"Longest Cycle in a Graph","memory":"65.8 MB","code":"\nclass Solution {\n    public int longestCycle(int[] edges) {\n        int[] cycleLength = new int[edges.length];\n        Arrays.fill(cycleLength, -1);\n        boolean[] visited = new boolean[edges.length];\n        int max = -1;\n        for (int i = 0; i < edges.length; i++) {\n            if (!visited[i]) {\n                visited[i] = true;\n                int destination = edges[i];\n                int length = 1;\n                HashMap<Integer, Integer> nodeToDistance = new HashMap<>();\n                nodeToDistance.put(i, 0);\n                while (destination != -1 && !visited[destination]) {\n                    nodeToDistance.put(destination, length);\n                    visited[destination] = true;\n                    destination = edges[destination];\n                    length++;\n                }\n                if (destination != -1 && nodeToDistance.containsKey(destination)) {\n                    System.out.println(nodeToDistance);\n                    cycleLength[destination] = length - nodeToDistance.get(destination);\n                    max = Math.max(length - nodeToDistance.get(destination), max);\n                }\n            } \n        }\n        return max;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-cycle-in-a-graph","has_notes":false}