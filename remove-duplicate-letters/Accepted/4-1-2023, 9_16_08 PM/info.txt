{"id":926027985,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1680363968,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/926027985/","is_pending":"Not Pending","title":"Remove Duplicate Letters","memory":"41.5 MB","code":"class Solution {\n    public String removeDuplicateLetters(String s) {\n        int[] lastIndex = new int[26];\n        for (int i = 0; i < s.length(); i++){\n            lastIndex[s.charAt(i) - 'a'] = i; // track the lastIndex of character presence\n        }\n        \n        boolean[] seen = new boolean[26]; // keep track seen\n        Stack<Integer> st = new Stack();\n        \n        for (int i = 0; i < s.length(); i++) {\n            int curr = s.charAt(i) - 'a';\n            if (seen[curr]) continue; // if seen continue as we need to pick one char only\n            while (!st.isEmpty() && st.peek() > curr && i < lastIndex[st.peek()]){\n                seen[st.pop()] = false; // pop out and mark unseen\n            }\n            st.push(curr); // add into stack\n            seen[curr] = true; // mark seen\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (!st.isEmpty())\n            sb.append((char) (st.pop() + 'a'));\n        return sb.reverse().toString();\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicate-letters","has_notes":false}