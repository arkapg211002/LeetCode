{"id":857540733,"lang":"java","lang_name":"Java","time":"4 months, 4 weeks","timestamp":1670672430,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/857540733/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"68.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    long max = 0;\n    public int maxProduct(TreeNode root) {\n        if(root == null) return 0;\n        \n        max = root.val;\n        long total = sum(root);\n        System.out.println(total);\n        helper(root,total);\n        return (int)(max % (Math.pow(10,9)+7));\n    }\n    \n    private long helper(TreeNode root,long total){\n        if(root == null) return 0;\n        long left = helper(root.left,total);\n        long right = helper(root.right,total);\n        long rem = total - left;\n        max = Math.max(max,rem * left);\n        rem = total - right;\n        max = Math.max(max,rem * right);\n        return left + right + root.val;\n    }\n    \n    private long sum(TreeNode root){\n        if(root == null) return 0;\n        long left = sum(root.left);\n        long right = sum(root.right);\n        return left+right+root.val;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree","has_notes":false}