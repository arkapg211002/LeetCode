{"id":934560907,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1681625635,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/934560907/","is_pending":"Not Pending","title":"Strange Printer II","memory":"42.3 MB","code":"class Solution {\n    private static final int CUSTOM_COLOR = 0;\n    public boolean isPrintable(int[][] targetGrid) {\n        Set<Integer> colors = getColors(targetGrid);\n        Map<Integer, int[]> minMaxXY = getMinMaxXY(colors, targetGrid);\n        Queue<Integer> queue = new LinkedList<>();\n        for (int color : colors) {\n            if (isColorRectangular(color, targetGrid, minMaxXY.get(color))) {\n                queue.offer(color);\n            }\n        }\n        while(!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i=0; i < size; ++i) {\n                int color = queue.poll();\n                mark(color, targetGrid, minMaxXY.get(color));\n                colors.remove(color);\n            }\n            for (int color : colors) {\n                if (isColorRectangular(color, targetGrid, minMaxXY.get(color))) {\n                    queue.offer(color);\n                }\n            }\n        }\n        \n        return colors.isEmpty();\n    }\n    \n    private void mark(int color, int[][] targetGrid, int[] minMaxXY) {\n        int minX = minMaxXY[0], maxX = minMaxXY[1];\n        int minY = minMaxXY[2], maxY = minMaxXY[3];\n        for(int x=minX; x <= maxX; ++x) {\n            for (int y = minY; y <= maxY; ++y) {\n                targetGrid[x][y] = CUSTOM_COLOR;\n            }\n        }\n    }\n    \n    private boolean isColorRectangular(int targetColor, int[][] targetGrid, int[] minMaxXY) {\n        int minX = minMaxXY[0], maxX = minMaxXY[1];\n        int minY = minMaxXY[2], maxY = minMaxXY[3];\n        for(int x=minX; x <= maxX; ++x) {\n            for (int y = minY; y <= maxY; ++y) {\n                int color = targetGrid[x][y];\n                if (color != targetColor && color != CUSTOM_COLOR) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    private Map<Integer, int[]> getMinMaxXY(Set<Integer> colors, int[][] targetGrid) {\n        // minX, maxX, minY, maxY\n        Map<Integer, int[]> minMaxes = new HashMap<>();\n        for(int color : colors) {\n            minMaxes.put(color, new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE});\n        }\n        \n        for (int x=0; x < targetGrid.length; ++x) {\n            for (int y=0; y < targetGrid[0].length; ++y) {\n                int color = targetGrid[x][y];\n                int[] minMax = minMaxes.get(color);\n                minMax[0] = Math.min(x, minMax[0]);\n                minMax[1] = Math.max(x, minMax[1]);\n                minMax[2] = Math.min(y, minMax[2]);\n                minMax[3] = Math.max(y, minMax[3]);\n            }\n        }\n        return minMaxes;\n    }\n    \n    private Set<Integer> getColors(int[][] targetGrid) {\n        Set<Integer> set = new HashSet<>();\n        for(int[] row : targetGrid) {\n            for (int val : row) {\n                set.add(val);\n            }\n        }\n        return set;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"strange-printer-ii","has_notes":false}