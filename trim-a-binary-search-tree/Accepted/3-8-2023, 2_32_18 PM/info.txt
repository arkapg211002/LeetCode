{"id":911365981,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1678266138,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/911365981/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int l,h;\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        l=low;h=high;\n        return traverse(root);\n        \n    }\n    public TreeNode traverse(TreeNode root)\n    {\n        if(root==null)return null;\n        root.left=traverse(root.left);\n        root.right=traverse(root.right);\n        if(root.val<l || root.val>h)\n        {\n            if(root.left==null)root=root.right;\n            else if(root.right==null)root=root.left;\n            \n\n        }\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trim-a-binary-search-tree","has_notes":false}