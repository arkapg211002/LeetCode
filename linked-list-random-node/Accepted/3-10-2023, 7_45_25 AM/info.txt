{"id":912410960,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1678414525,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/912410960/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"44.6 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution \n{\n    List<Integer> li = null ;\n\n    public Solution(ListNode head) \n    {\n        li = new ArrayList<Integer>();\n        ListNode temp = head ;\n        while(temp != null)\n        {\n            li.add(temp.val);\n            temp = temp.next ;\n        }\n    }\n    \n    public int getRandom() \n    {\n        int max = li.size() ;\n        int min = 0 ;\n        int range = max - min + 1;\n            \n        int rand = (int)(Math.random() * range) + min;\n        while( rand >= li.size() )\n        {\n            rand = (int)(Math.random() * range) + min;\n        }\n        return li.get(rand) ;\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.getRandom();\n */","compare_result":"11111111","title_slug":"linked-list-random-node","has_notes":false}