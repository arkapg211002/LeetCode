{"id":878342862,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1673750781,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/878342862/","is_pending":"Not Pending","title":"Number of Good Paths","memory":"N/A","code":"class Solution {\n    int[] parents, count, vals;\n    int res;\n    public int numberOfGoodPaths(int[] vals, int[][] edges) {\n        this.vals=vals;\n        Arrays.sort(edges, (a,b)->Math.max(vals[a[0]], vals[a[1]])-Math.max(vals[b[0]],vals[b[1]])); good paths is equal to the number of nodes\n        res = vals.length;\n        parents = new int[vals.length];\n        for(int i = 0; i < vals.length; i++) parents[i] = i;\n        count = new int[vals.length];\n        for(int[] edge: edges) union(edge[0], edge[1]);\n        return res;\n    }\n    \n    boolean union(int a, int b) {\n        int pa = parent(a);\n        int pb = parent(b);\n        if(pa == pb) return false;\n        if(vals[pa] == vals[pb]) {\n            res += (count[pa]+1)*(count[pb]+1);\n            count[pa] += count[pb]+1;\n            parents[pb] = pa;\n        }\n        else if(vals[pa] > vals[pb]) parents[pb] = pa;\n        else parents[pa] = pb;\n        return true;\n    }\n    \n    private int parent(int a) {\n        int p;\n        if((p=parents[a])!=a) p=parents[a]=parent(p);\n        return p;\n    }\n}","compare_result":null,"title_slug":"number-of-good-paths","has_notes":false}