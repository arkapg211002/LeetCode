{"id":846361311,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1668868105,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/846361311/","is_pending":"Not Pending","title":"Erect the Fence","memory":"54.8 MB","code":"class Solution {\n    private int orientation(int[] p,int[] q,int[] r){\n        return (r[1]-q[1]) * (q[0]-p[0]) - ( (q[1]-p[1]) * (r[0]-q[0])); \n    }\n    public int[][] outerTrees(int[][] trees) {\n        Stack<int[]> upper= new Stack<>();\n        Stack<int[]> lower= new Stack<>();\n        Arrays.sort(trees,(p,q) ->\n                  q[0]-p[0]==0?q[1]-p[1]:q[0]-p[0] );\n        for(int i=0;i<trees.length;i++){\n            while(lower.size()>= 2 && orientation(lower.get(lower.size()-2),lower.get(lower.size()-1),trees[i]) >0){\n                lower.pop();\n            }\n            while(upper.size()>= 2 && orientation(upper.get(upper.size()-2),upper.get(upper.size()-1),trees[i])<0){\n                upper.pop();\n            }\n            lower.push(trees[i]);\n            upper.push(trees[i]);\n            \n        }\n        Set<int[]> res= new HashSet<>(lower);\n        res.addAll(upper);\n        return res.toArray(new int[res.size()][]);\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"erect-the-fence","has_notes":false}